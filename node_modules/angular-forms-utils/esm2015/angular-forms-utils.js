import { Component, EventEmitter, Input, Output, ViewChild, KeyValueDiffers, Injectable, NgModule } from '@angular/core';
import { FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { DaterangePickerComponent, DaterangepickerConfig, Daterangepicker } from 'ng2-daterangepicker';
import * as moment_ from 'moment';
import { TreeviewConfig, TreeviewComponent, TreeviewModule } from 'ngx-treeview';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { MultiselectDropdownModule } from 'angular-2-dropdown-multiselect';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReactiveFormComponent {
    constructor() {
        this.fields = [];
        this.events = [];
        this.afterInit = new EventEmitter(true);
        this.afterViewInit = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.fields.forEach((field) => {
            this.form.addControl(field.id, field.control);
        });
        this.afterInit.next(true);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.afterViewInit.next(true);
    }
}
ReactiveFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-reactive-form',
                template: `
<form [formGroup]="form">
  <div class="row">
    <div class="form-group col-{{field.col || 'sm-6'}}" [ngClass]="field.class" *ngFor="let field of fields">
      <label for="{{field.id}}">{{field.label | translate}} <small *ngIf='field.info'>{{field.info | translate}}</small></label>
      <tw-input-text *ngIf='field.type==="text" || field.type==="number" || field.type==="hidden" || field.type==="email" || field.type==="password"' [group]='form' [field]='field' [request]='request'></tw-input-text>
      <tw-input-float *ngIf='field.type==="float"' [group]='form' [field]='field' [request]='request'></tw-input-float>
      <tw-select *ngIf='field.type==="select"' [group]='form' [field]='field' [request]='request'></tw-select>
      <tw-select-t *ngIf='field.type==="selectT"' [group]='form' [field]='field' [request]='request'></tw-select-t>
      <tw-enumselect *ngIf='field.type==="enumselect" || field.type==="enummultiselect"' [group]='form' [field]='field' [request]='request'></tw-enumselect>
      <tw-datetime-picker *ngIf='field.type==="datetime"' [group]='form' [field]='field' [request]='request'></tw-datetime-picker>
      <tw-daterange-picker *ngIf='field.type==="daterange"' [group]='form' [field]='field' [request]='request'></tw-daterange-picker>
      <tw-time-picker *ngIf='field.type==="time"' [group]='form' [field]='field' [request]='request'></tw-time-picker>
      <tw-switch *ngIf='field.type==="boolean"' [group]='form' [field]='field' [request]='request'></tw-switch>
      <tw-groupselect *ngIf='field.type==="groupselect"' [group]='form' [field]='field' [request]='request'></tw-groupselect>
      <tw-multiselect *ngIf='field.type==="multiselect"' [group]='form' [field]='field' [request]='request'></tw-multiselect>
      <tw-multiselectcb *ngIf='field.type==="multiselectcb"' [group]='form' [field]='field' [request]='request'></tw-multiselectcb>
      <tw-textarea *ngIf='field.type==="textarea"' [group]='form' [field]='field' [request]='request'></tw-textarea>
      <tw-date-picker *ngIf='field.type==="date"' [group]='form' [field]='field' [request]='request'></tw-date-picker>
      <tw-dof *ngIf='field.type==="daysOfWeek"' [group]='form' [field]='field' [request]='request'></tw-dof>
      <tw-treeview-txt *ngIf='field.type==="treeview-txt" || field.type==="dropdown-treeview-txt"' [group]='form' [field]='field' [request]='request'></tw-treeview-txt>
      <tw-treeview-radio *ngIf='field.type==="treeview-radio" || field.type==="dropdown-treeview-radio"' [group]='form' [field]='field' [request]='request'></tw-treeview-radio>
      <tw-treeview *ngIf='field.type==="treeview" || field.type==="dropdown-treeview"' [group]='form' [field]='field' [request]='request'></tw-treeview>
    </div>
  </div>
</form>
  `
            },] },
];
/** @nocollapse */
ReactiveFormComponent.ctorParameters = () => [];
ReactiveFormComponent.propDecorators = {
    "fields": [{ type: Input },],
    "form": [{ type: Input },],
    "request": [{ type: Input },],
    "afterInit": [{ type: Output },],
    "afterViewInit": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class FormField {
    /**
     * @param {?} values
     */
    constructor(values) {
        Object.assign(this, values);
        this.control = new FormControl('');
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    required() {
        this.control.setValidators(/** @type {?} */ (Validators.required));
        return this;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    setValidators(v) {
        this.control.setValidators(v);
        return this;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    setValue(v) {
        this.control.setValue(v);
        this.valueChange.next(v);
        return this;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    addValidator(v) {
        let /** @type {?} */ validators = [];
        if (this.control.validator)
            validators.push(this.control.validator);
        validators.push(v);
        this.control.setValidators(validators);
        return this;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const moment = moment_;
class DatetimePickerComponent {
    constructor() {
        this.daterange = {};
        this.minute = '';
        this.firstShow = true;
    }
    /**
     * @param {?} value
     * @param {?=} datepicker
     * @return {?}
     */
    selectedDate(value, datepicker) {
        if (value.start) {
            if (!this.field.more.dateOnly)
                this.request[this.field.id] = value.start;
            else
                this.request[this.field.id] = value.start.hours(12);
            this.datepicker.nativeElement.value = value.start.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm");
        }
        this.field.control.setValue(this.datepicker.nativeElement.value);
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    showDaterangepicker(ev) {
        if (this.firstShow)
            this.selectedDate({ start: this.defaultValue });
        this.firstShow = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.datepicker.nativeElement = this.datepicker.nativeElement;
        if (this.field.more) {
            if (this.field.more.defaultValue) {
                switch (this.field.more.defaultValue) {
                    case 'startOfDay':
                        this.defaultValue = moment().startOf('day');
                        break;
                    case 'endOfDay':
                        this.defaultValue = moment().endOf('day');
                        break;
                    default:
                        this.defaultValue = this.field.more.defaultValue;
                        break;
                }
            }
            else {
                this.defaultValue = moment();
            }
        }
        else {
            this.field.more = {};
        }
        if (this.request[this.field.id]) {
            let /** @type {?} */ v = moment(this.request[this.field.id]);
            this.defaultValue = v;
            this.field.control.setValue(v.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm"));
        }
        // if (this.field.more.dateOnly)
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/))
        // else
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/))
        this.options = {
            singleDatePicker: true,
            timePicker: !this.field.more.dateOnly,
            autoApply: true,
            timePicker24Hour: true,
            autoUpdateInput: false,
            startDate: this.defaultValue
        };
        if (this.field.more.options)
            for (let /** @type {?} */ i in this.field.more.options)
                this.options[i] = this.field.more.options[i];
        this.sub = this.field.valueChange.subscribe((v) => {
            this.datepickerComponent.render();
            this.datepickerComponent.selected.next({ start: moment(v) });
            this.datepickerComponent.datePicker.setStartDate(moment(v));
            // this.selectedDate({ start: moment(v) })
        });
    }
    /**
     * @return {?}
     */
    clear() {
        this.request[this.field.id] = null;
        this.datepicker.nativeElement.value = '';
        this.field.control.setValue('');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.sub)
            this.sub.unsubscribe();
    }
}
DatetimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-datetime-picker',
                //   template: `
                //   <div [formGroup]='group' class="input-group">
                //       <input [formControlName]='field.id' name='{{field.id}}' class='form-control' (valueChanged)='valueChanged($event)' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]="field.more.closeOnSelect || false" [(ngModel)]="request[field.id]" [date-only]="field.more.dateOnly ||false" [date-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"' [parse-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"'  readonly/>
                //       <span class="input-group-btn">
                //         <button class='btn btn-default' (click)='clear()'>&times;</button>
                //       </span>
                // </div>
                //   `
                template: `
  <div [formGroup]='group' class="input-group">
  <input #datepicker class='form-control' type="text" [formControlName]='field.id' name='{{field.id}}' id='{{field.id}}' daterangepicker [options]="options" (selected)="selectedDate($event, daterange)" (showDaterangepicker)="showDaterangepicker($event)"  readonly/>
  <span class="input-group-btn">
  <button class='btn btn-default' (click)='clear()'>&times;</button>
  </span>
  </div>`
            },] },
];
/** @nocollapse */
DatetimePickerComponent.ctorParameters = () => [];
DatetimePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "datepicker": [{ type: ViewChild, args: ['datepicker',] },],
    "datepickerComponent": [{ type: ViewChild, args: [DaterangePickerComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DatePickerComponent {
    constructor() {
        this.defaultValue = '';
        this.closeOnSelect = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.field.more)
            this.field.more = {};
        this.field.more.dateOnly = true;
        if (!this.field.more.dateFormat)
            this.field.more.dateFormat = 'YYYY-MM-DD';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // if (this.sub)
        //   this.sub.unsubscribe()
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-date-picker',
                template: `<tw-datetime-picker [group]='group' [field]='field'  [request]='request'></tw-datetime-picker>`
            },] },
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [];
DatePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const moment$1 = moment_;
class DateRangePickerComponent {
    /**
     * @param {?} differs
     */
    constructor(differs) {
        this.differs = differs;
        this.daterange = {};
        this.minute = '';
        this.firstShow = true;
        this.differ = differs.find({}).create();
    }
    /**
     * @param {?} value
     * @param {?=} datepicker
     * @return {?}
     */
    selectedDate(value, datepicker) {
        if (value.start && value.end) {
            if (!this.field.more.dateOnly) {
                this.request[this.field.more.model1] = value.start;
                this.request[this.field.more.model2] = value.end;
            }
            else {
                this.request[this.field.more.model1] = value.start.hours(12);
                this.request[this.field.more.model2] = value.end.hours(12);
            }
            this.datepicker.nativeElement.value = value.start.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm") + ' - ' + value.end.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm");
        }
        this.field.control.setValue(this.datepicker.nativeElement.value);
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    showDaterangepicker(ev) {
        if (this.firstShow)
            this.selectedDate({ start: this.defaultValue1, end: this.defaultValue2 });
        this.firstShow = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.datepicker.nativeElement = this.datepicker.nativeElement;
        if (this.field.more) {
            if (this.field.more.defaultValue1) {
                switch (this.field.more.defaultValue1) {
                    case 'startOfDay':
                        this.defaultValue1 = moment$1().startOf('day');
                        break;
                    case 'endOfDay':
                        this.defaultValue1 = moment$1().endOf('day');
                        break;
                    default:
                        this.defaultValue1 = this.field.more.defaultValue1;
                        break;
                }
            }
            else {
                this.defaultValue1 = moment$1();
            }
            if (this.field.more.defaultValue2) {
                switch (this.field.more.defaultValue2) {
                    case 'startOfDay':
                        this.defaultValue2 = moment$1().startOf('day');
                        break;
                    case 'endOfDay':
                        this.defaultValue2 = moment$1().endOf('day');
                        break;
                    default:
                        this.defaultValue2 = this.field.more.defaultValue2;
                        break;
                }
            }
            else {
                this.defaultValue2 = moment$1();
            }
        }
        else {
            this.field.more = {};
        }
        if (this.request[this.field.more.model1]) {
            let /** @type {?} */ v = moment$1(this.request[this.field.more.model1]);
            this.defaultValue1 = v;
        }
        if (this.request[this.field.more.model2]) {
            let /** @type {?} */ v = moment$1(this.request[this.field.more.model2]);
            this.defaultValue2 = v;
        }
        if (this.request[this.field.more.model1] && this.request[this.field.more.model2])
            this.field.control.setValue(this.defaultValue1.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm") + ' - ' + this.defaultValue2.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm"));
        // if (this.field.more.dateOnly)
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/))
        // else
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/))
        this.options = {
            timePicker: !this.field.more.dateOnly,
            timePicker24Hour: true,
            autoUpdateInput: false,
            autoApply: true,
            startDate: this.defaultValue1,
            endDate: this.defaultValue2
        };
        if (this.field.more.options)
            for (let /** @type {?} */ i in this.field.more.options)
                this.options[i] = this.field.more.options[i];
    }
    /**
     * @return {?}
     */
    clear() {
        this.request[this.field.more.model1] = null;
        this.request[this.field.more.model2] = null;
        this.datepicker.nativeElement.value = '';
        this.field.control.setValue('');
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        var /** @type {?} */ changes = this.differ.diff(this.request);
        if (changes) {
            let /** @type {?} */ start = null;
            let /** @type {?} */ end = null;
            changes.forEachChangedItem(r => {
                if (r.key === this.field.more.model1) {
                    start = r.currentValue;
                }
                else if (r.key === this.field.more.model2) {
                    end = r.currentValue;
                }
            });
            if (start || end) {
                this.selectedDate({ start: start || moment$1(this.request[this.field.more.model1]), end: end || moment$1(this.request[this.field.more.model2]) });
                this.firstShow = false;
            }
        }
    }
}
DateRangePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-daterange-picker',
                //   template: `
                //   <div [formGroup]='group' class="input-group">
                //       <input [formControlName]='field.id' name='{{field.id}}' class='form-control' (valueChanged)='valueChanged($event)' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]="field.more.closeOnSelect || false" [(ngModel)]="request[field.id]" [date-only]="field.more.dateOnly ||false" [date-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"' [parse-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"'  readonly/>
                //       <span class="input-group-btn">
                //         <button class='btn btn-default' (click)='clear()'>&times;</button>
                //       </span>
                // </div>
                //   `
                template: `
  <div [formGroup]='group' class="input-group">
  <input #datepicker class='form-control' type="text" [formControlName]='field.id' name='{{field.id}}' daterangepicker [options]="options" (selected)="selectedDate($event, daterange)"  (showDaterangepicker)="showDaterangepicker($event)" readonly/>
  <span class="input-group-btn">
  <button class='btn btn-default' (click)='clear()'>&times;</button>
  </span>
  </div>`
            },] },
];
/** @nocollapse */
DateRangePickerComponent.ctorParameters = () => [
    { type: KeyValueDiffers, },
];
DateRangePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "datepicker": [{ type: ViewChild, args: ['datepicker',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SelectComponent {
}
SelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-select',
                template: `
  <div [formGroup]='group'>
  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]="request[field.id]">
      <option [ngValue]="field.firstValue.value " *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>
      <option [ngValue]="option[field.optionValue] " *ngFor="let option of field.options ">
        {{option[field.optionText]}}
      </option>
    </select>
</div>
  `
            },] },
];
/** @nocollapse */
SelectComponent.ctorParameters = () => [];
SelectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SelectTComponent {
}
SelectTComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-select-t',
                template: `
  <div [formGroup]='group'>
  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]="request[field.id]">
      <option [ngValue]="field.firstValue.value" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>
      <option [ngValue]="option[field.optionValue]" *ngFor="let option of field.options ">
        {{option[field.optionText] | translate}}
      </option>
    </select>
</div>
  `
            },] },
];
/** @nocollapse */
SelectTComponent.ctorParameters = () => [];
SelectTComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EnumselectComponent {
    /**
     * @param {?} enumObj
     * @return {?}
     */
    enumToArray(enumObj) {
        return Object.keys(enumObj).slice(Object.keys(enumObj).length / 2);
    }
}
EnumselectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-enumselect',
                template: `
  <div [formGroup]='group'>
  <select [attr.multiple]='field.type === "enumselect"?null:true' [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]="request[field.id]">
      <option [ngValue]="field.firstValue.value" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>
      <option [ngValue]="option" *ngFor="let option of enumToArray(field.options)">
        {{option | translate}}
      </option>
    </select>
</div>
  `
            },] },
];
/** @nocollapse */
EnumselectComponent.ctorParameters = () => [];
EnumselectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InputTextComponent {
    /**
     * @return {?}
     */
    clear() {
        this.request[this.field.id] = null;
    }
}
InputTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-input-text',
                template: `
   <div [formGroup]='group' [ngClass]='field.more?.nullable ? "input-group" :""'>
  <input [formControlName]='field.id' name='{{field.id}}' type='{{field.type}}' class='form-control' [(ngModel)]="request[field.id]"
    [readonly]='field.more?.readonly' />
          <span class="input-group-btn" *ngIf='field.more?.nullable && field.type!=="hidden"'>
        <button class='btn btn-default' (click)='clear()'>&times;</button>
      </span>
</div>
   `
            },] },
];
/** @nocollapse */
InputTextComponent.ctorParameters = () => [];
InputTextComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InputFloatComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.field.addValidator(Validators.pattern(/^[+-]?([0-9]*[.])?[0-9]+$/));
        this.sub = this.field.control.valueChanges.subscribe((value) => {
            this.request[this.field.id] = parseFloat(value);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.sub)
            this.sub.unsubscribe();
    }
}
InputFloatComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-input-float',
                template: `
  <div [formGroup]='group'>
    <input [formControlName]='field.id' name='{{field.id}}' type='text' class='form-control' [readonly]='field.more?.readonly'  />
  </div>`
            },] },
];
/** @nocollapse */
InputFloatComponent.ctorParameters = () => [];
InputFloatComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// <div [formGroup]='group' class="input-group">
//   <input [formControlName]='field.id' name='{{field.id}}' class='form-control' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]="field.more.closeOnSelect || false"  (valueChanged)='valueChanged($event)'  [(ngModel)]="request[field.id]"  [time-only]="true" date-format='HH:mm' parse-format='HH:mm'  readonly/>
//       <span class="input-group-btn">
//       <button class='btn btn-default' (click)='clear()'>&times;</button>
//     </span>
// </div>
class TimePickerComponent {
    constructor() {
        this.defaultValue = '';
        this.hours = [];
        for (let /** @type {?} */ i = 0; i <= 23; i++) {
            if (i < 10)
                this.hours.push('0' + i.toString());
            else
                this.hours.push(i.toString());
        }
        this.minutes = [];
        for (let /** @type {?} */ i = 0; i <= 59; i++) {
            if (i < 10)
                this.minutes.push('0' + i.toString());
            else
                this.minutes.push(i.toString());
        }
    }
    /**
     * @param {?=} hour
     * @return {?}
     */
    onChange(hour) {
        if (hour && !this.minute)
            this.minute = '00';
        if (this.hour && this.minute)
            this.request[this.field.id] = this.hour + ':' + this.minute;
        else
            this.request[this.field.id] = null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ngOnChanges(value) {
        let /** @type {?} */ newV = value['request'].currentValue[this.field.id];
        if (newV) {
            let /** @type {?} */ split = newV.split(':');
            this.hour = split[0] ? split[0] : '';
            this.minute = split[1] ? split[1] : '';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field.more) {
            if (this.field.more.defaultValue) {
                // switch (this.field.more.defaultValue) {
                //   case 'startOfDay':
                //     this.defaultValue = '00:00'
                //     break
                //   case 'endOfDay':
                //     this.defaultValue = '23:59'
                //     break
                //   default:
                //     this.defaultValue = this.field.more.defaultValue
                //     break
                // }
            }
        }
        else {
            this.field.more = {};
        }
        // this.field.addValidator(Validators.pattern(/^(00|0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[0-5][0-9])(:([0-9]|[0-5][0-9]))?$/))
    }
    /**
     * @return {?}
     */
    clear() {
        this.hour = '';
        this.minute = '';
        this.request[this.field.id] = null;
    }
}
TimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-time-picker',
                template: `
  <div [formGroup]='group' style='display:none'>
  <input type='hidden'  [formControlName]='field.id' [(ngModel)]="this.request[this.field.id]" />
  </div>
  <div class='clear' >
   <select [(ngModel)]="hour" (ngModelChange)='onChange(true)' class='form-control pull-left' style='width:100px;'>
        <option [ngValue]=""></option>
        <option *ngFor="let h of hours" [ngValue]="h">{{h}}</option>
    </select>
    <span class='pull-left' style='margin:5px'>hh</span>
     <select [(ngModel)]="minute" (ngModelChange)='onChange()'  class='form-control pull-left' style='width:100px;'>
        <option [ngValue]=""></option>
        <option *ngFor="let m of minutes" [ngValue]="m">{{m}}</option>
    </select>
    <span class='pull-left' style='margin:5px'>mm</span>
      <button class='btn btn-default pull-left'  (click)='clear()'>&times;</button>
  </div>
    `
            },] },
];
/** @nocollapse */
TimePickerComponent.ctorParameters = () => [];
TimePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SwitchComponent {
}
SwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-switch',
                template: `
  <div [formGroup]='group'>
  <label class="switch switch-icon switch-pill switch-primary-outline-alt">
        <input type="checkbox" [formControlName]='field.id' class="switch-input"  [(ngModel)]="request[field.id]" >
        <span class="switch-label" data-on="yes" data-off="no"></span>
        <span class="switch-handle"></span>
    </label>
</div>
  `
            },] },
];
/** @nocollapse */
SwitchComponent.ctorParameters = () => [];
SwitchComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GroupSelectComponent {
}
GroupSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-groupselect',
                template: `
  <div [formGroup]='group'>
  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]="request[field.id]" >
        <option [ngValue]="field.firstValue.value " *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>
        <optgroup label="{{group.label}}" *ngFor="let group of field.options">
        <option [ngValue]="option[field.optionValue]" *ngFor="let option of group.values">
          {{option[field.optionText]}}
        </option>
      </optgroup>
    </select>
</div>
  `
            },] },
];
/** @nocollapse */
GroupSelectComponent.ctorParameters = () => [];
GroupSelectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MultiSelectComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.field.more)
            this.field.more = {};
    }
    /**
     * @return {?}
     */
    get allSelected() {
        return this.testSelected();
    }
    /**
     * @return {?}
     */
    selectAll() {
        if (this.testSelected())
            this.request[this.field.id] = [];
        else {
            this.request[this.field.id] = [];
            this.field.options.forEach((option) => {
                this.request[this.field.id].push(option[this.field.optionValue]);
            });
        }
    }
    /**
     * @return {?}
     */
    testSelected() {
        if (!this.request[this.field.id] || !this.field.options)
            return false;
        if (this.request[this.field.id].length === this.field.options.length)
            return true;
        if (this.request[this.field.id].length === this.field.options.size)
            return true;
        return false;
    }
}
MultiSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-multiselect',
                template: `
  <div [formGroup]='group'>
   <button style='margin-top: -30px; margin-bottom: 5px;' [ngClass]="allSelected ? 'btn-primary' : 'btn-default'" class='btn-sm btn pull-right' (click)='selectAll()' > {{field.more.allText || 'All'}}</button>
<select multiple [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]="request[field.id]">
    <option [ngValue]="option[field.optionValue]" *ngFor="let option of field.options">
      {{option[field.optionText]}}
    </option>
  </select>
  </div>
  `
            },] },
];
/** @nocollapse */
MultiSelectComponent.ctorParameters = () => [];
MultiSelectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MultiSelectCBComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.field.more)
            this.field.more = {};
    }
    /**
     * @return {?}
     */
    get allSelected() {
        return this.testSelected();
    }
    /**
     * @return {?}
     */
    get options() {
        if (this.field.options)
            return this.field.options.map((opt) => {
                opt.id = opt[this.field.optionValue];
                opt.name = opt[this.field.optionText];
                return opt;
            });
        return [];
    }
    /**
     * @return {?}
     */
    selectAll() {
        if (this.testSelected())
            this.request[this.field.id] = [];
        else {
            this.request[this.field.id] = [];
            this.field.options.forEach((option) => {
                this.request[this.field.id].push(option[this.field.optionValue]);
            });
        }
    }
    /**
     * @return {?}
     */
    testSelected() {
        if (!this.request[this.field.id] || !this.field.options)
            return false;
        if (this.request[this.field.id].length === this.field.options.length)
            return true;
        if (this.request[this.field.id].length === this.field.options.size)
            return true;
        return false;
    }
}
MultiSelectCBComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-multiselectcb',
                template: `
  <div [formGroup]='group'>
    <button style='margin-top: -30px; margin-bottom: 5px;' [ngClass]="allSelected ? 'btn-primary' : 'btn-default'" class='btn-sm btn pull-right' (click)='selectAll()' > {{field.more.allText || 'All'}}</button>
    <ss-multiselect-dropdown [formControlName]='field.id' [options]="options" [(ngModel)]="request[field.id]" ></ss-multiselect-dropdown>
  </div>
  `
            },] },
];
/** @nocollapse */
MultiSelectCBComponent.ctorParameters = () => [];
MultiSelectCBComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DaysOfWeekComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.field.options = DaysOfWeekValues;
    }
}
DaysOfWeekComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-dof',
                template: `<tw-enumselect [group]='group' [field]='field' [request]='request'></tw-enumselect>`
            },] },
];
/** @nocollapse */
DaysOfWeekComponent.ctorParameters = () => [];
DaysOfWeekComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/** @enum {number} */
const DaysOfWeekValues = {
    Sunday: 0,
    Monday: 1,
    Tuesday: 2,
    Wednesday: 3,
    Thursday: 4,
    Friday: 5,
    Saturday: 6,
};
DaysOfWeekValues[DaysOfWeekValues.Sunday] = "Sunday";
DaysOfWeekValues[DaysOfWeekValues.Monday] = "Monday";
DaysOfWeekValues[DaysOfWeekValues.Tuesday] = "Tuesday";
DaysOfWeekValues[DaysOfWeekValues.Wednesday] = "Wednesday";
DaysOfWeekValues[DaysOfWeekValues.Thursday] = "Thursday";
DaysOfWeekValues[DaysOfWeekValues.Friday] = "Friday";
DaysOfWeekValues[DaysOfWeekValues.Saturday] = "Saturday";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TextAreaComponent {
}
TextAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-textarea',
                template: `
  <div [formGroup]='group'>
   <textarea [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]="request[field.id]"></textarea>
</div>
  `
            },] },
];
/** @nocollapse */
TextAreaComponent.ctorParameters = () => [];
TextAreaComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TreeViewComponent {
    constructor() {
        this.selectConfig = TreeviewConfig.create({
            hasAllCheckBox: true,
            hasFilter: true,
            hasCollapseExpand: true,
            decoupleChildFromParent: false,
            maxHeight: 500
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    checkItem(item) {
        let /** @type {?} */ selection = item.getSelection();
        let /** @type {?} */ values = [];
        if (item.children) {
            if (selection.uncheckedItems.length === 0)
                values.push(item.value);
            for (const /** @type {?} */ child of item.children)
                values = values.concat(this.checkItem(child));
        }
        return values;
    }
    /**
     * @param {?=} values
     * @return {?}
     */
    updateModel(values) {
        /*Select Parent*/
        if (this.treeviewComponent) {
            for (const /** @type {?} */ item of this.treeviewComponent.items) {
                values = values.concat(this.checkItem(item));
            }
        }
        if (values)
            this.field.setValue(values);
        else
            this.field.setValue([]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field.more && this.field.more.selectConfig)
            this.selectConfig = this.field.more.selectConfig;
    }
}
TreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview',
                template: `
  <div [formGroup]='group'>
   <ngx-treeview *ngIf='field.type==="treeview"' [config]="selectConfig" [items]="field.options" (selectedChange)="updateModel($event)"></ngx-treeview>
   <ngx-dropdown-treeview *ngIf='field.type==="dropdown-treeview"'  [config]="selectConfig" [items]="field.options" (selectedChange)="updateModel($event)"></ngx-dropdown-treeview>
  <input [formControlName]='field.id' name='{{field.id}}' type='hidden' class='form-control' [(ngModel)]="request[field.id]"/>
</div>
  `
            },] },
];
/** @nocollapse */
TreeViewComponent.ctorParameters = () => [];
TreeViewComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "treeviewComponent": [{ type: ViewChild, args: [TreeviewComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TreeViewTxtComponent {
    constructor() {
        this.selectConfig = TreeviewConfig.create({
            hasAllCheckBox: true,
            hasFilter: true,
            hasCollapseExpand: true,
            decoupleChildFromParent: false,
            maxHeight: 500
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    checkItem(item) {
        let /** @type {?} */ selection = item.getSelection();
        let /** @type {?} */ values = [];
        if (item.children) {
            if (selection.uncheckedItems.length === 0)
                values.push(item.value);
            for (const /** @type {?} */ child of item.children)
                values = values.concat(this.checkItem(child));
        }
        return values;
    }
    /**
     * @param {?=} values
     * @return {?}
     */
    updateModel(values) {
        /*Select Parent*/
        if (this.treeviewComponent) {
            for (const /** @type {?} */ item of this.treeviewComponent.items) {
                values = values.concat(this.checkItem(item));
            }
        }
        if (values)
            this.field.setValue(values.join(','));
        else
            this.field.setValue('');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field.more && this.field.more.selectConfig)
            this.selectConfig = this.field.more.selectConfig;
    }
}
TreeViewTxtComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview-txt',
                template: `
  <div [formGroup]='group'>
   <ngx-treeview #treeview *ngIf='field.type==="treeview-txt"' id="treeview_{{field.id}}" [config]="selectConfig" [items]="field.options" (selectedChange)="updateModel($event)"></ngx-treeview>
   <ngx-dropdown-treeview *ngIf='field.type==="dropdown-treeview-txt"' id="treeview_{{field.id}}" [config]="selectConfig" [items]="field.options" (selectedChange)="updateModel($event)"></ngx-dropdown-treeview>
    <input [formControlName]='field.id' name='{{field.id}}' type='hidden' class='form-control' [(ngModel)]="request[field.id]"/>
</div>
  `
            },] },
];
/** @nocollapse */
TreeViewTxtComponent.ctorParameters = () => [];
TreeViewTxtComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "treeviewComponent": [{ type: ViewChild, args: [TreeviewComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TreeViewRadioComponent {
    constructor() {
        this.selectConfig = TreeviewConfig.create({
            hasAllCheckBox: true,
            hasFilter: true,
            hasCollapseExpand: true,
            decoupleChildFromParent: false,
            maxHeight: 500
        });
    }
    /**
     * @return {?}
     */
    toggleCollapseExpand() {
        this.allItem.collapsed = !this.allItem.collapsed;
        if (this.field.options.items) {
            this.field.options.items.forEach((item) => item.setCollapsedRecursive(this.allItem.collapsed));
        }
    }
    /**
     * @param {?=} values
     * @return {?}
     */
    updateModel(values) {
        if (values)
            this.field.setValue(values.join(','));
        else
            this.field.setValue('');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field.more && this.field.more.selectConfig)
            this.selectConfig = this.field.more.selectConfig;
    }
}
TreeViewRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview-radio',
                template: `
<ng-template #tpl let-item="item"
    let-toggleCollapseExpand="toggleCollapseExpand"
    let-onCheckedChange="onCheckedChange">
    <div class="form-check" [formGroup]='group'>
        <i *ngIf="item.children" (click)="toggleCollapseExpand()" aria-hidden="true"
            class="fa" [class.fa-caret-right]="item.collapsed" [class.fa-caret-down]="!item.collapsed"></i>
        <label class="form-check-label">
            <input type="radio"  class="form-check-input" [(ngModel)]="request[field.id]" [formControlName]='field.id'  name='{{field.id}}' [value]='item.value' />
            {{item.text}}
        </label>
    </div>
</ng-template>
<div class="treeview-header">
</div>
<div class="treeview-container" [style.max-height.px]="selectConfig.maxHeight" >
    <div *ngFor="let item of field.options">
        <tw-treeview-item [item]="item" [template]="template || tpl" >
        </tw-treeview-item>
    </div>
</div>
`,
                styles: [`
.row-margin {
    margin-top: .3rem;
}
.label-item-all {
}
.label-collapse-expand {
    margin: 0;
    padding: 0 .3rem;
    cursor: pointer;
}
.divider {
    height: 1px;
    margin: 0.5rem 0;
    overflow: hidden;
    background: #000;
}
.treeview-container {
    overflow-x: hidden;
    overflow-y: auto;
    padding-right: 18px;
}
.treeview-text {
    padding: .3rem 0;
    white-space: nowrap;
}
`]
            },] },
];
/** @nocollapse */
TreeViewRadioComponent.ctorParameters = () => [];
TreeViewRadioComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TreeViewItemComponent {
    constructor() {
        this.toggleCollapseExpand = () => {
            this.item.collapsed = !this.item.collapsed;
        };
    }
}
TreeViewItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview-item',
                template: `
<div class="treeview-item">
    <ng-template [ngTemplateOutlet]="template"
        [ngTemplateOutletContext]="{item: item, toggleCollapseExpand: toggleCollapseExpand}">
    </ng-template>
    <div *ngIf="!item.collapsed">
        <tw-treeview-item *ngFor="let child of item.children" [item]="child" [template]="template">
        </tw-treeview-item>
    </div>
</div>
    `,
                styles: [`
:host {
    display: block;
}
:host /deep/ .fa {
    margin-right: .2rem;
    width: .5rem;
    cursor: pointer;
}
.treeview-item {
    white-space: nowrap;
}
.treeview-item .treeview-item {
    margin-left: 2rem;
}
    `]
            },] },
];
/** @nocollapse */
TreeViewItemComponent.ctorParameters = () => [];
TreeViewItemComponent.propDecorators = {
    "template": [{ type: Input },],
    "item": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BusyService {
    constructor() {
        this.global = false;
    }
    /**
     * @return {?}
     */
    start() {
        this.global = true;
    }
    /**
     * @return {?}
     */
    stop() {
        this.global = false;
    }
}
BusyService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BusyService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BusyButtonComponent {
    /**
     * @param {?} busy
     */
    constructor(busy) {
        this.busy = busy;
        this.onClick = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    send() {
        this.onClick.next(true);
    }
}
BusyButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-busy-button',
                template: '<button (click)=\'send()\' [class]="cssClass" [disabled]="disabled || busy.global"><span style=\'margin- right:5px\'  *ngIf=\'busy.global\'><img src="assets/img/ajax-loader.gif"/></span><i class=\'fa fa-{{icon }}\' style=\'margin- right:5px\'  *ngIf=\'icon && !busy.global\'></i><ng-content></ng-content></button>'
            },] },
];
/** @nocollapse */
BusyButtonComponent.ctorParameters = () => [
    { type: BusyService, },
];
BusyButtonComponent.propDecorators = {
    "cssClass": [{ type: Input },],
    "disabled": [{ type: Input },],
    "icon": [{ type: Input },],
    "onClick": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularFormsUtilsConfigs {
    /**
     * @param {?} daterangepickerConfig
     */
    constructor(daterangepickerConfig) {
        this.daterangepickerConfig = daterangepickerConfig;
    }
}
AngularFormsUtilsConfigs.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AngularFormsUtilsConfigs.ctorParameters = () => [
    { type: DaterangepickerConfig, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// NguiDatetime.parseDate = (str: any): any => {
//   let m: any = moment(str)
//   if (!m.isValid()) { //Time
//     // let tmp = str.split(':');
//     m = moment()
//     // m.set('hour', parseInt(tmp[0] || '0', 10))
//     // m.set('minute', parseInt(tmp[1] || '0', 10))
//     // m.set('second', parseInt(tmp[2] || '0', 10))
//   }
//   return m.toDate()
// }
let decExp = [
    ReactiveFormComponent,
    DatetimePickerComponent,
    MultiSelectCBComponent,
    SelectComponent,
    EnumselectComponent,
    InputTextComponent,
    InputFloatComponent,
    TimePickerComponent,
    SwitchComponent,
    GroupSelectComponent,
    DatePickerComponent,
    DaysOfWeekComponent,
    MultiSelectComponent,
    TextAreaComponent,
    BusyButtonComponent,
    TreeViewComponent,
    TreeViewTxtComponent,
    TreeViewRadioComponent,
    TreeViewItemComponent,
    SelectTComponent,
    DateRangePickerComponent
];
class AngularFormsUtilsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AngularFormsUtilsModule, providers: [BusyService] };
    }
}
AngularFormsUtilsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    ReactiveFormsModule,
                    CommonModule,
                    TranslateModule,
                    MultiselectDropdownModule,
                    FormsModule,
                    TreeviewModule,
                    Daterangepicker
                ],
                declarations: decExp,
                exports: decExp,
                providers: [AngularFormsUtilsConfigs]
            },] },
];
/** @nocollapse */
AngularFormsUtilsModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { BusyService, AngularFormsUtilsConfigs, AngularFormsUtilsModule, FormField, BusyButtonComponent as ɵo, DatePickerComponent as ɵk, DateRangePickerComponent as ɵu, DatetimePickerComponent as ɵb, DaysOfWeekComponent as ɵl, EnumselectComponent as ɵe, GroupSelectComponent as ɵj, InputFloatComponent as ɵg, InputTextComponent as ɵf, MultiSelectComponent as ɵm, MultiSelectCBComponent as ɵc, ReactiveFormComponent as ɵa, SelectTComponent as ɵt, SelectComponent as ɵd, SwitchComponent as ɵi, TextAreaComponent as ɵn, TimePickerComponent as ɵh, TreeViewItemComponent as ɵs, TreeViewRadioComponent as ɵr, TreeViewTxtComponent as ɵq, TreeViewComponent as ɵp };
//# sourceMappingURL=angular-forms-utils.js.map
