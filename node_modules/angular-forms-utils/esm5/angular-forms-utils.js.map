{
  "version": 3,
  "file": "angular-forms-utils.js",
  "sources": [
    "ng://angular-forms-utils/out/angularFormsUtils.module.ts",
    "ng://angular-forms-utils/out/angularFormsUtilsConfigs.service.ts",
    "ng://angular-forms-utils/out/busy-button/busy-button.component.ts",
    "ng://angular-forms-utils/out/busy-button/busy.service.ts",
    "ng://angular-forms-utils/out/reactive-form/treeview-radio/treeview-item.component.ts",
    "ng://angular-forms-utils/out/reactive-form/treeview-radio/treeview-radio.component.ts",
    "ng://angular-forms-utils/out/reactive-form/treeview-txt/treeview-txt.component.ts",
    "ng://angular-forms-utils/out/reactive-form/treeview/treeview.component.ts",
    "ng://angular-forms-utils/out/reactive-form/textarea/textarea.component.ts",
    "ng://angular-forms-utils/out/reactive-form/days-of-week/days-of-week.component.ts",
    "ng://angular-forms-utils/out/reactive-form/multi-selectcb/multi-selectcb.component.ts",
    "ng://angular-forms-utils/out/reactive-form/multi-select/multi-select.component.ts",
    "ng://angular-forms-utils/out/reactive-form/group-select/group-select.component.ts",
    "ng://angular-forms-utils/out/reactive-form/switch/switch.component.ts",
    "ng://angular-forms-utils/out/reactive-form/time-picker/time-picker.component.ts",
    "ng://angular-forms-utils/out/reactive-form/input-float/input-float.component.ts",
    "ng://angular-forms-utils/out/reactive-form/input-text/input-text.component.ts",
    "ng://angular-forms-utils/out/reactive-form/enumselect/enumselect.component.ts",
    "ng://angular-forms-utils/out/reactive-form/select-t/select-t.component.ts",
    "ng://angular-forms-utils/out/reactive-form/select/select.component.ts",
    "ng://angular-forms-utils/out/reactive-form/date-range-picker/date-range-picker.component.ts",
    "ng://angular-forms-utils/out/reactive-form/date-picker/date-picker.component.ts",
    "ng://angular-forms-utils/out/reactive-form/datetime-picker/datetime-picker.component.ts",
    "ng://angular-forms-utils/out/reactive-form/form-field.model.ts",
    "ng://angular-forms-utils/out/reactive-form/reactive-form.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormComponent } from './reactive-form/reactive-form.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DatetimePickerComponent } from './reactive-form/datetime-picker/datetime-picker.component';\nimport { DatePickerComponent } from './reactive-form/date-picker/date-picker.component';\nimport { DateRangePickerComponent } from './reactive-form/date-range-picker/date-range-picker.component';\nimport { SelectComponent } from './reactive-form/select/select.component';\nimport { SelectTComponent } from './reactive-form/select-t/select-t.component';\nimport { EnumselectComponent } from './reactive-form/enumselect/enumselect.component';\nimport { InputTextComponent } from './reactive-form/input-text/input-text.component';\nimport { InputFloatComponent } from './reactive-form/input-float/input-float.component';\nimport { TimePickerComponent } from './reactive-form/time-picker/time-picker.component';\nimport { SwitchComponent } from './reactive-form/switch/switch.component';\nimport { GroupSelectComponent } from './reactive-form/group-select/group-select.component';\nimport { MultiSelectComponent } from './reactive-form/multi-select/multi-select.component';\nimport { MultiSelectCBComponent } from './reactive-form/multi-selectcb/multi-selectcb.component';\nimport { DaysOfWeekComponent } from './reactive-form/days-of-week/days-of-week.component'\nimport { TextAreaComponent } from './reactive-form/textarea/textarea.component'\nimport { TreeViewComponent } from './reactive-form/treeview/treeview.component'\nimport { TreeViewTxtComponent } from './reactive-form/treeview-txt/treeview-txt.component'\nimport { TreeViewRadioComponent } from './reactive-form/treeview-radio/treeview-radio.component'\nimport { TreeViewItemComponent } from './reactive-form/treeview-radio/treeview-item.component'\n\nimport { BusyButtonComponent } from './busy-button/busy-button.component'\nimport { BusyService } from './busy-button/busy.service'\nimport { MultiselectDropdownModule } from 'angular-2-dropdown-multiselect';\n\nimport { TreeviewModule } from 'ngx-treeview';\n// import { NguiDatetimePickerModule, NguiDatetime } from '@ngui/datetime-picker';\n// import * as moment from 'moment'\n\nimport { Daterangepicker } from 'ng2-daterangepicker';\nimport { AngularFormsUtilsConfigs } from './angularFormsUtilsConfigs.service';\n\n// NguiDatetime.parseDate = (str: any): any => {\n//   let m: any = moment(str)\n//   if (!m.isValid()) { //Time\n//     // let tmp = str.split(':');\n//     m = moment()\n//     // m.set('hour', parseInt(tmp[0] || '0', 10))\n//     // m.set('minute', parseInt(tmp[1] || '0', 10))\n//     // m.set('second', parseInt(tmp[2] || '0', 10))\n//   }\n//   return m.toDate()\n// }\n\nlet decExp: any[] =\n  [\n    ReactiveFormComponent,\n    DatetimePickerComponent,\n    MultiSelectCBComponent,\n    SelectComponent,\n    EnumselectComponent,\n    InputTextComponent,\n    InputFloatComponent,\n    TimePickerComponent,\n    SwitchComponent,\n    GroupSelectComponent,\n    DatePickerComponent,\n    DaysOfWeekComponent,\n    MultiSelectComponent,\n    TextAreaComponent,\n    BusyButtonComponent,\n    TreeViewComponent,\n    TreeViewTxtComponent,\n    TreeViewRadioComponent,\n    TreeViewItemComponent,\n    SelectTComponent,\n    DateRangePickerComponent\n  ]\n\n\n@NgModule({\n  imports: [\n    ReactiveFormsModule,\n    CommonModule,\n    TranslateModule,\n    MultiselectDropdownModule,\n    // NguiDatetimePickerModule,\n    FormsModule,\n    TreeviewModule,\n    Daterangepicker\n  ],\n  declarations: decExp,\n  exports: decExp,\n  providers: [AngularFormsUtilsConfigs]\n})\nexport class AngularFormsUtilsModule {\n\n  public static forRoot(): ModuleWithProviders {\n    return { ngModule: AngularFormsUtilsModule, providers: [BusyService] };\n  }\n\n\n}",
    "import { Injectable } from '@angular/core';\nimport { DaterangepickerConfig } from 'ng2-daterangepicker';\n\n@Injectable()\nexport class AngularFormsUtilsConfigs {\n\n    constructor(public daterangepickerConfig: DaterangepickerConfig) {\n    }\n\n}",
    "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BusyService } from './busy.service';\n\n@Component({\n    selector: 'tw-busy-button',\n    template: '<button (click)=\\'send()\\' [class]=\"cssClass\" [disabled]=\"disabled || busy.global\"><span style=\\'margin- right:5px\\'  *ngIf=\\'busy.global\\'><img src=\"assets/img/ajax-loader.gif\"/></span><i class=\\'fa fa-{{icon }}\\' style=\\'margin- right:5px\\'  *ngIf=\\'icon && !busy.global\\'></i><ng-content></ng-content></button>'\n})\nexport class BusyButtonComponent {\n\n    @Input() cssClass: string\n    @Input() disabled: boolean\n    @Input() icon: string\n    @Output() onClick: EventEmitter<boolean>\n\n    constructor(public busy: BusyService) {\n        this.onClick = new EventEmitter<boolean>(true)\n    }\n\n    send(): void {\n        this.onClick.next(true)\n    }\n\n}\n",
    "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class BusyService {\n    global: boolean = false\n\n    start(): void {\n        this.global = true\n    }\n    stop(): void {\n        this.global = false\n    }\n}\n",
    "import { Component, Input, TemplateRef } from '@angular/core';\nimport { TreeviewItem } from 'ngx-treeview';\n// import { TreeviewItemTemplateContext } from 'ng2-dropdown-treeview/src/treeview-item-template-context';\n\n@Component({\n    selector: 'tw-treeview-item',\n    template: `\n<div class=\"treeview-item\">\n    <ng-template [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{item: item, toggleCollapseExpand: toggleCollapseExpand}\">\n    </ng-template>\n    <div *ngIf=\"!item.collapsed\">\n        <tw-treeview-item *ngFor=\"let child of item.children\" [item]=\"child\" [template]=\"template\">\n        </tw-treeview-item>\n    </div>\n</div>\n    `,\n    styles: [`\n:host {\n    display: block;\n}\n:host /deep/ .fa {\n    margin-right: .2rem;\n    width: .5rem;\n    cursor: pointer;\n}\n.treeview-item {\n    white-space: nowrap;\n}\n.treeview-item .treeview-item {\n    margin-left: 2rem;\n}\n    `]\n})\n\nexport class TreeViewItemComponent {\n\n    @Input() template: TemplateRef<any>;\n    @Input() item: TreeviewItem;\n\n    toggleCollapseExpand = () => {\n        this.item.collapsed = !this.item.collapsed;\n    }\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { TreeviewConfig, TreeviewItem } from 'ngx-treeview';\n\nimport { FormField } from '../form-field.model'\n\n@Component({\n    selector: 'tw-treeview-radio',\n    template: `\n<ng-template #tpl let-item=\"item\"\n    let-toggleCollapseExpand=\"toggleCollapseExpand\"\n    let-onCheckedChange=\"onCheckedChange\">\n    <div class=\"form-check\" [formGroup]='group'>\n        <i *ngIf=\"item.children\" (click)=\"toggleCollapseExpand()\" aria-hidden=\"true\"\n            class=\"fa\" [class.fa-caret-right]=\"item.collapsed\" [class.fa-caret-down]=\"!item.collapsed\"></i>\n        <label class=\"form-check-label\">\n            <input type=\"radio\"  class=\"form-check-input\" [(ngModel)]=\"request[field.id]\" [formControlName]='field.id'  name='{{field.id}}' [value]='item.value' />\n            {{item.text}}\n        </label>\n    </div>\n</ng-template>\n<div class=\"treeview-header\">\n  \n</div>\n<div class=\"treeview-container\" [style.max-height.px]=\"selectConfig.maxHeight\" >\n    <div *ngFor=\"let item of field.options\">\n        <tw-treeview-item [item]=\"item\" [template]=\"template || tpl\" >\n        </tw-treeview-item>\n    </div>\n</div>\n`,\n    styles: [`\n.row-margin {\n    margin-top: .3rem;\n}\n.label-item-all {\n}\n.label-collapse-expand {\n    margin: 0;\n    padding: 0 .3rem;\n    cursor: pointer;\n}\n.divider {\n    height: 1px;\n    margin: 0.5rem 0;\n    overflow: hidden;\n    background: #000;\n}\n.treeview-container {\n    overflow-x: hidden;\n    overflow-y: auto;\n    padding-right: 18px;\n}\n.treeview-text {\n    padding: .3rem 0;\n    white-space: nowrap;\n}\n`]\n})\nexport class TreeViewRadioComponent implements OnInit {\n\n    @Input() group: FormGroup\n    @Input() field: FormField\n    @Input() request: any\n    allItem: TreeviewItem;\n\n    public selectConfig: TreeviewConfig = TreeviewConfig.create({\n        hasAllCheckBox: true,\n        hasFilter: true,\n        hasCollapseExpand: true,\n        decoupleChildFromParent: false,\n        maxHeight: 500\n    })\n\n    toggleCollapseExpand(): void {\n        this.allItem.collapsed = !this.allItem.collapsed;\n        if (this.field.options.items) {\n            this.field.options.items.forEach((item: TreeviewItem) => item.setCollapsedRecursive(this.allItem.collapsed));\n        }\n    }\n\n\n\n    public updateModel(values?: any[]): void {\n        if (values)\n            this.field.setValue(values.join(','))\n        else\n            this.field.setValue('')\n    }\n    ngOnInit(): void {\n        if (this.field.more && this.field.more.selectConfig)\n            this.selectConfig = this.field.more.selectConfig\n    }\n}\n",
    "import { Component, OnInit, Input, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { TreeviewConfig, TreeviewSelection, TreeviewComponent, TreeviewItem } from 'ngx-treeview';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-treeview-txt',\n  template: `\n  <div [formGroup]='group'>\n   <ngx-treeview #treeview *ngIf='field.type===\"treeview-txt\"' id=\"treeview_{{field.id}}\" [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-treeview>\n   <ngx-dropdown-treeview *ngIf='field.type===\"dropdown-treeview-txt\"' id=\"treeview_{{field.id}}\" [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-dropdown-treeview>\n    <input [formControlName]='field.id' name='{{field.id}}' type='hidden' class='form-control' [(ngModel)]=\"request[field.id]\"/>\n</div>\n  `\n})\nexport class TreeViewTxtComponent implements OnInit {\n\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n  @ViewChild(TreeviewComponent) treeviewComponent: TreeviewComponent\n\n  public selectConfig: TreeviewConfig = TreeviewConfig.create({\n    hasAllCheckBox: true,\n    hasFilter: true,\n    hasCollapseExpand: true,\n    decoupleChildFromParent: false,\n    maxHeight: 500\n  })\n\n\n\n  private checkItem(item: TreeviewItem): any[] {\n    let selection: TreeviewSelection = item.getSelection();\n    let values: any[] = []\n\n    if (item.children) {\n      if (selection.uncheckedItems.length === 0)\n        values.push(item.value)\n\n      for (const child of item.children)\n        values = values.concat(this.checkItem(child))\n\n    }\n    return values\n  }\n\n\n\n\n  public updateModel(values?: any[]): void {\n\n    /*Select Parent*/\n    if (this.treeviewComponent) {\n      for (const item of this.treeviewComponent.items) {\n        values = values.concat(this.checkItem(item))\n      }\n    }\n\n    if (values)\n      this.field.setValue(values.join(','))\n    else\n      this.field.setValue('')\n  }\n  ngOnInit(): void {\n    if (this.field.more && this.field.more.selectConfig)\n      this.selectConfig = this.field.more.selectConfig\n  }\n}\n",
    "import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\nimport { TreeviewConfig, TreeviewSelection, TreeviewComponent, TreeviewItem } from 'ngx-treeview';\n\n@Component({\n  selector: 'tw-treeview',\n  template: `\n  <div [formGroup]='group'>\n   <ngx-treeview *ngIf='field.type===\"treeview\"' [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-treeview>\n   <ngx-dropdown-treeview *ngIf='field.type===\"dropdown-treeview\"'  [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-dropdown-treeview>\n  <input [formControlName]='field.id' name='{{field.id}}' type='hidden' class='form-control' [(ngModel)]=\"request[field.id]\"/>\n</div>\n  `\n})\nexport class TreeViewComponent implements OnInit {\n\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n  @ViewChild(TreeviewComponent) treeviewComponent: TreeviewComponent\n\n  public selectConfig: TreeviewConfig = TreeviewConfig.create({\n    hasAllCheckBox: true,\n    hasFilter: true,\n    hasCollapseExpand: true,\n    decoupleChildFromParent: false,\n    maxHeight: 500\n  })\n\n  private checkItem(item: TreeviewItem): any[] {\n    let selection: TreeviewSelection = item.getSelection();\n    let values: any[] = []\n\n    if (item.children) {\n      if (selection.uncheckedItems.length === 0)\n        values.push(item.value)\n\n      for (const child of item.children)\n        values = values.concat(this.checkItem(child))\n\n    }\n    return values\n  }\n\n  public updateModel(values?: any[]): void {\n\n    /*Select Parent*/\n    if (this.treeviewComponent) {\n      for (const item of this.treeviewComponent.items) {\n        values = values.concat(this.checkItem(item))\n      }\n    }\n\n    if (values)\n      this.field.setValue(values)\n    else\n      this.field.setValue([])\n  }\n\n\n  ngOnInit(): void {\n    if (this.field.more && this.field.more.selectConfig)\n      this.selectConfig = this.field.more.selectConfig\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-textarea',\n  template: `\n  <div [formGroup]='group'>\n   <textarea [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\"></textarea>\n</div>\n  `\n})\nexport class TextAreaComponent {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-dof',\n  template: `<tw-enumselect [group]='group' [field]='field' [request]='request'></tw-enumselect>`\n\n})\nexport class DaysOfWeekComponent implements OnInit {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n  ngOnInit(): void {\n    this.field.options = DaysOfWeekValues\n  }\n\n}\n\n\n\nexport enum DaysOfWeekValues {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-multiselectcb',\n  template: `\n  <div [formGroup]='group'>\n    <button style='margin-top: -30px; margin-bottom: 5px;' [ngClass]=\"allSelected ? 'btn-primary' : 'btn-default'\" class='btn-sm btn pull-right' (click)='selectAll()' > {{field.more.allText || 'All'}}</button>\n    <ss-multiselect-dropdown [formControlName]='field.id' [options]=\"options\" [(ngModel)]=\"request[field.id]\" ></ss-multiselect-dropdown>\n  </div>\n  `\n})\nexport class MultiSelectCBComponent implements OnInit {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n  ngOnInit(): void {\n    if (!this.field.more)\n      this.field.more = {}\n  }\n\n  get allSelected(): boolean {\n    return this.testSelected()\n  }\n\n  get options() {\n    if (this.field.options)\n      return this.field.options.map((opt: any) => {\n        opt.id = opt[this.field.optionValue]\n        opt.name = opt[this.field.optionText]\n        return opt\n      })\n    return []\n  }\n\n\n  selectAll(): void {\n    if (this.testSelected())\n      this.request[this.field.id] = []\n    else {\n      this.request[this.field.id] = []\n\n      this.field.options.forEach((option: any) => {\n        this.request[this.field.id].push(option[this.field.optionValue])\n      });\n    }\n  }\n\n  private testSelected(): boolean {\n    if (!this.request[this.field.id] || !this.field.options)\n      return false\n\n    if (this.request[this.field.id].length === this.field.options.length)\n      return true\n\n    if (this.request[this.field.id].length === this.field.options.size)\n      return true\n\n    return false\n  }\n\n\n\n}\n",
    "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n\n\n\n@Component({\n  selector: 'tw-multiselect',\n  template: `\n  <div [formGroup]='group'>\n   <button style='margin-top: -30px; margin-bottom: 5px;' [ngClass]=\"allSelected ? 'btn-primary' : 'btn-default'\" class='btn-sm btn pull-right' (click)='selectAll()' > {{field.more.allText || 'All'}}</button>\n<select multiple [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n    <option [ngValue]=\"option[field.optionValue]\" *ngFor=\"let option of field.options\">\n      {{option[field.optionText]}}\n    </option>\n  </select>\n  </div>\n  `\n})\nexport class MultiSelectComponent implements OnInit {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n  ngOnInit(): void {\n    if (!this.field.more)\n      this.field.more = {}\n  }\n\n\n  get allSelected(): boolean {\n    return this.testSelected()\n  }\n\n\n  selectAll(): void {\n    if (this.testSelected())\n      this.request[this.field.id] = []\n    else {\n      this.request[this.field.id] = []\n\n      this.field.options.forEach((option: any) => {\n        this.request[this.field.id].push(option[this.field.optionValue])\n      });\n    }\n  }\n\n  private testSelected(): boolean {\n    if (!this.request[this.field.id] || !this.field.options)\n      return false\n\n    if (this.request[this.field.id].length === this.field.options.length)\n      return true\n\n    if (this.request[this.field.id].length === this.field.options.size)\n      return true\n\n    return false\n  }\n\n\n\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n\n@Component({\n  selector: 'tw-groupselect',\n  template: `\n  <div [formGroup]='group'>\n  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\" >\n        <option [ngValue]=\"field.firstValue.value \" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n        <optgroup label=\"{{group.label}}\" *ngFor=\"let group of field.options\">\n        <option [ngValue]=\"option[field.optionValue]\" *ngFor=\"let option of group.values\">\n          {{option[field.optionText]}}\n        </option>\n      </optgroup>\n    </select>\n</div>\n  `\n})\nexport class GroupSelectComponent {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-switch',\n  template: `\n  <div [formGroup]='group'>\n  <label class=\"switch switch-icon switch-pill switch-primary-outline-alt\">\n        <input type=\"checkbox\" [formControlName]='field.id' class=\"switch-input\"  [(ngModel)]=\"request[field.id]\" >\n        <span class=\"switch-label\" data-on=\"yes\" data-off=\"no\"></span>\n        <span class=\"switch-handle\"></span>\n    </label>\n</div>\n  `\n})\nexport class SwitchComponent {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n}\n",
    "import { OnInit, Component, SimpleChanges, Input, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n\n@Component({\n  selector: 'tw-time-picker',\n  template: `\n  <div [formGroup]='group' style='display:none'>\n  <input type='hidden'  [formControlName]='field.id' [(ngModel)]=\"this.request[this.field.id]\" />\n  </div>\n  <div class='clear' >\n   <select [(ngModel)]=\"hour\" (ngModelChange)='onChange(true)' class='form-control pull-left' style='width:100px;'>\n        <option [ngValue]=\"\"></option>\n        <option *ngFor=\"let h of hours\" [ngValue]=\"h\">{{h}}</option>\n    </select>\n    <span class='pull-left' style='margin:5px'>hh</span>\n     <select [(ngModel)]=\"minute\" (ngModelChange)='onChange()'  class='form-control pull-left' style='width:100px;'>\n        <option [ngValue]=\"\"></option>\n        <option *ngFor=\"let m of minutes\" [ngValue]=\"m\">{{m}}</option>\n    </select>\n    <span class='pull-left' style='margin:5px'>mm</span>\n      <button class='btn btn-default pull-left'  (click)='clear()'>&times;</button>\n  </div>\n    `\n})\n\n// <div [formGroup]='group' class=\"input-group\">\n//   <input [formControlName]='field.id' name='{{field.id}}' class='form-control' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]=\"field.more.closeOnSelect || false\"  (valueChanged)='valueChanged($event)'  [(ngModel)]=\"request[field.id]\"  [time-only]=\"true\" date-format='HH:mm' parse-format='HH:mm'  readonly/>\n//       <span class=\"input-group-btn\">\n//       <button class='btn btn-default' (click)='clear()'>&times;</button>\n//     </span>\n// </div>\nexport class TimePickerComponent implements OnInit, OnChanges {\n  // <small class='text-danger' *ngIf='field.control.value && field.control.invalid'>Invalid Format : YYYY-MM-DD HH:MM</small>\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n  defaultValue: string = ''\n\n  hours: string[]\n  minutes: string[]\n\n  hour: string\n  minute: string\n\n  constructor() {\n    this.hours = []\n    for (let i: number = 0; i <= 23; i++) {\n      if (i < 10)\n        this.hours.push('0' + i.toString())\n      else\n        this.hours.push(i.toString())\n    }\n\n    this.minutes = []\n    for (let i: number = 0; i <= 59; i++) {\n      if (i < 10)\n        this.minutes.push('0' + i.toString())\n      else\n        this.minutes.push(i.toString())\n    }\n  }\n\n  // get model(): string {\n  //   return this.request[this.field.id]\n\n  // }\n\n  // set model(m: string) {\n  //   console.log(this.hour)\n  // }\n\n  onChange(hour?: boolean): void {\n    if (hour && !this.minute)\n      this.minute = '00'\n\n    if (this.hour && this.minute)\n      this.request[this.field.id] = this.hour + ':' + this.minute\n    else\n      this.request[this.field.id] = null\n  }\n\n\n  ngOnChanges(value: SimpleChanges): void {\n    let newV: string = value['request'].currentValue[this.field.id]\n    if (newV) {\n      let split: string[] = newV.split(':')\n      this.hour = split[0] ? split[0] : ''\n      this.minute = split[1] ? split[1] : ''\n    }\n\n  }\n\n  ngOnInit(): void {\n\n    if (this.field.more) {\n      if (this.field.more.defaultValue) {\n        // switch (this.field.more.defaultValue) {\n        //   case 'startOfDay':\n        //     this.defaultValue = '00:00'\n        //     break\n        //   case 'endOfDay':\n        //     this.defaultValue = '23:59'\n        //     break\n        //   default:\n        //     this.defaultValue = this.field.more.defaultValue\n        //     break\n        // }\n      }\n    } else {\n      this.field.more = {}\n    }\n    // this.field.addValidator(Validators.pattern(/^(00|0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[0-5][0-9])(:([0-9]|[0-5][0-9]))?$/))\n\n  }\n\n\n\n  // valueChanged(date: Date): void {\n  //   // console.log('time changed')\n  //   if (date)\n  //     this.request[this.field.id] = date.toString()\n  // }\n\n\n  clear(): void {\n    this.hour = ''\n    this.minute = ''\n    this.request[this.field.id] = null\n  }\n\n}\n",
    "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs'\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-input-float',\n  template: `\n  <div [formGroup]='group'>\n    <input [formControlName]='field.id' name='{{field.id}}' type='text' class='form-control' [readonly]='field.more?.readonly'  />\n  </div>`\n})\nexport class InputFloatComponent implements OnInit, OnDestroy {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n  private sub: Subscription\n\n  ngOnInit(): void {\n    this.field.addValidator(Validators.pattern(/^[+-]?([0-9]*[.])?[0-9]+$/))\n    this.sub = this.field.control.valueChanges.subscribe((value: string) => {\n      this.request[this.field.id] = parseFloat(value)\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub)\n      this.sub.unsubscribe()\n  }\n}",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-input-text',\n  template: `\n   <div [formGroup]='group' [ngClass]='field.more?.nullable ? \"input-group\" :\"\"'>\n  <input [formControlName]='field.id' name='{{field.id}}' type='{{field.type}}' class='form-control' [(ngModel)]=\"request[field.id]\" \n    [readonly]='field.more?.readonly' />\n          <span class=\"input-group-btn\" *ngIf='field.more?.nullable && field.type!==\"hidden\"'>\n        <button class='btn btn-default' (click)='clear()'>&times;</button>\n      </span>\n</div>\n   `\n\n})\nexport class InputTextComponent {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n\n  clear(): void {\n    this.request[this.field.id] = null\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-enumselect',\n  template: `\n  <div [formGroup]='group'>\n  <select [attr.multiple]='field.type === \"enumselect\"?null:true' [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n      <option [ngValue]=\"field.firstValue.value\" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n      <option [ngValue]=\"option\" *ngFor=\"let option of enumToArray(field.options)\">\n        {{option | translate}}\n      </option>\n    </select>\n</div>\n  `\n})\nexport class EnumselectComponent {\n\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n  public enumToArray(enumObj: any): string[] {\n    return Object.keys(enumObj).slice(Object.keys(enumObj).length / 2)\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-select-t',\n  template: `\n  <div [formGroup]='group'>\n  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n      <option [ngValue]=\"field.firstValue.value\" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n      <option [ngValue]=\"option[field.optionValue]\" *ngFor=\"let option of field.options \">\n        {{option[field.optionText] | translate}}\n      </option>\n    </select>\n</div>\n  `\n})\nexport class SelectTComponent {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-select',\n  template: `\n  <div [formGroup]='group'>\n  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n      <option [ngValue]=\"field.firstValue.value \" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n      <option [ngValue]=\"option[field.optionValue] \" *ngFor=\"let option of field.options \">\n        {{option[field.optionText]}}\n      </option>\n    </select>\n</div>\n  `\n})\nexport class SelectComponent {\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n}\n",
    "import { Component, KeyValueDiffers, DoCheck, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Component({\n  selector: 'tw-daterange-picker',\n  //   template: `\n  //   <div [formGroup]='group' class=\"input-group\">\n  //       <input [formControlName]='field.id' name='{{field.id}}' class='form-control' (valueChanged)='valueChanged($event)' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]=\"field.more.closeOnSelect || false\" [(ngModel)]=\"request[field.id]\" [date-only]=\"field.more.dateOnly ||false\" [date-format]='this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\"' [parse-format]='this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\"'  readonly/>\n  //       <span class=\"input-group-btn\">\n  //         <button class='btn btn-default' (click)='clear()'>&times;</button>\n  //       </span>\n  // </div>\n  //   `\n  template: `\n  <div [formGroup]='group' class=\"input-group\">\n  <input #datepicker class='form-control' type=\"text\" [formControlName]='field.id' name='{{field.id}}' daterangepicker [options]=\"options\" (selected)=\"selectedDate($event, daterange)\"  (showDaterangepicker)=\"showDaterangepicker($event)\" readonly/>\n  <span class=\"input-group-btn\">\n  <button class='btn btn-default' (click)='clear()'>&times;</button>\n  </span>\n  </div>`\n\n})\nexport class DateRangePickerComponent implements OnInit, DoCheck {\n  // <small class='text-danger' *ngIf='field.control.value && field.control.invalid'>Invalid Format : YYYY-MM-DD HH:MM</small>\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n  @ViewChild('datepicker') datepicker: ElementRef;\n  public daterange: any = {};\n  defaultValue1: any\n  defaultValue2: any\n  minute: string = ''\n\n  options: any\n\n  firstShow = true\n  differ: any;\n  constructor(private differs: KeyValueDiffers) {\n    this.differ = differs.find({}).create();\n  }\n\n  selectedDate(value: any, datepicker?: any) {\n    if (value.start && value.end) {\n      if (!this.field.more.dateOnly) {\n        this.request[this.field.more.model1] = value.start\n        this.request[this.field.more.model2] = value.end\n      }\n      else {\n        this.request[this.field.more.model1] = value.start.hours(12)\n        this.request[this.field.more.model2] = value.end.hours(12)\n      }\n      this.datepicker.nativeElement.value = value.start.format(this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\") + ' - ' + value.end.format(this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\")\n    }\n    this.field.control.setValue(this.datepicker.nativeElement.value)\n  }\n\n\n  showDaterangepicker(ev: any) {\n    if (this.firstShow)\n      this.selectedDate({ start: this.defaultValue1, end: this.defaultValue2 })\n\n    this.firstShow = false\n  }\n\n\n  ngOnInit(): void {\n    this.datepicker.nativeElement = this.datepicker.nativeElement\n    if (this.field.more) {\n      if (this.field.more.defaultValue1) {\n        switch (this.field.more.defaultValue1) {\n          case 'startOfDay':\n            this.defaultValue1 = moment().startOf('day')\n            break\n          case 'endOfDay':\n            this.defaultValue1 = moment().endOf('day')\n            break\n          default:\n            this.defaultValue1 = this.field.more.defaultValue1\n            break\n        }\n      } else {\n        this.defaultValue1 = moment()\n      }\n      if (this.field.more.defaultValue2) {\n        switch (this.field.more.defaultValue2) {\n          case 'startOfDay':\n            this.defaultValue2 = moment().startOf('day')\n            break\n          case 'endOfDay':\n            this.defaultValue2 = moment().endOf('day')\n            break\n          default:\n            this.defaultValue2 = this.field.more.defaultValue2\n            break\n        }\n      } else {\n        this.defaultValue2 = moment()\n      }\n    } else {\n      this.field.more = {}\n    }\n\n    if (this.request[this.field.more.model1]) {\n      let v: any = moment(this.request[this.field.more.model1])\n      this.defaultValue1 = v\n    }\n\n    if (this.request[this.field.more.model2]) {\n      let v: any = moment(this.request[this.field.more.model2])\n      this.defaultValue2 = v\n    }\n\n    if (this.request[this.field.more.model1] && this.request[this.field.more.model2])\n      this.field.control.setValue(this.defaultValue1.format(this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\") + ' - ' + this.defaultValue2.format(this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\"))\n\n\n    // if (this.field.more.dateOnly)\n    // this.field.addValidator(Validators.pattern(/^\\d\\d\\d\\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/))\n    // else\n    // this.field.addValidator(Validators.pattern(/^\\d\\d\\d\\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/))\n\n    this.options = {\n      timePicker: !this.field.more.dateOnly,\n      timePicker24Hour: true,\n      autoUpdateInput: false,\n      autoApply: true,\n      startDate: this.defaultValue1,\n      endDate: this.defaultValue2\n    };\n\n    if (this.field.more.options)\n      for (let i in this.field.more.options)\n        this.options[i] = this.field.more.options[i]\n\n  }\n\n  // valueChanged(date: Date): void {\n  //   if (this.field.more.dateOnly && date)\n  //     this.request[this.field.id] = date.toString()\n  // }\n\n\n  clear(): void {\n    this.request[this.field.more.model1] = null\n    this.request[this.field.more.model2] = null\n    this.datepicker.nativeElement.value = ''\n    this.field.control.setValue('')\n  }\n  ngDoCheck() {\n    var changes = this.differ.diff(this.request);\n    if (changes) {\n      let start: string = null\n      let end: string = null\n      changes.forEachChangedItem(r => {\n        if (r.key === this.field.more.model1) {\n          start = r.currentValue\n        } else\n          if (r.key === this.field.more.model2) {\n            end = r.currentValue\n          }\n      });\n      if (start || end) {\n        this.selectedDate({ start: start || moment(this.request[this.field.more.model1]), end: end || moment(this.request[this.field.more.model2]) })\n        this.firstShow = false\n      }\n    }\n  }\n}\n",
    "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n// import { Subscription } from 'rxjs'\nimport { FormField } from '../form-field.model'\n\n@Component({\n  selector: 'tw-date-picker',\n  template: `<tw-datetime-picker [group]='group' [field]='field'  [request]='request'></tw-datetime-picker>`\n\n})\nexport class DatePickerComponent implements OnInit, OnDestroy {\n\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n  defaultValue: string = ''\n  closeOnSelect: boolean = false\n\n  // private sub: Subscription\n\n  ngOnInit(): void {\n    if (!this.field.more)\n      this.field.more = {}\n\n    this.field.more.dateOnly = true\n    if (!this.field.more.dateFormat)\n      this.field.more.dateFormat = 'YYYY-MM-DD'\n  }\n\n  ngOnDestroy(): void {\n    // if (this.sub)\n    //   this.sub.unsubscribe()\n  }\n}\n",
    "import { Component, Input, ElementRef, OnDestroy, OnInit, ViewChild, DoCheck, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from '../form-field.model'\nimport { Subscription } from 'rxjs'\n// import * as jQuery from 'jquery'\nimport { DaterangePickerComponent } from 'ng2-daterangepicker';\n\n\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Component({\n  selector: 'tw-datetime-picker',\n  //   template: `\n  //   <div [formGroup]='group' class=\"input-group\">\n  //       <input [formControlName]='field.id' name='{{field.id}}' class='form-control' (valueChanged)='valueChanged($event)' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]=\"field.more.closeOnSelect || false\" [(ngModel)]=\"request[field.id]\" [date-only]=\"field.more.dateOnly ||false\" [date-format]='this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\"' [parse-format]='this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\"'  readonly/>\n  //       <span class=\"input-group-btn\">\n  //         <button class='btn btn-default' (click)='clear()'>&times;</button>\n  //       </span>\n  // </div>\n  //   `\n  template: `\n  <div [formGroup]='group' class=\"input-group\">\n  <input #datepicker class='form-control' type=\"text\" [formControlName]='field.id' name='{{field.id}}' id='{{field.id}}' daterangepicker [options]=\"options\" (selected)=\"selectedDate($event, daterange)\" (showDaterangepicker)=\"showDaterangepicker($event)\"  readonly/>\n  <span class=\"input-group-btn\">\n  <button class='btn btn-default' (click)='clear()'>&times;</button>\n  </span>\n  </div>`\n\n})\nexport class DatetimePickerComponent implements OnInit, OnDestroy {\n  // <small class='text-danger' *ngIf='field.control.value && field.control.invalid'>Invalid Format : YYYY-MM-DD HH:MM</small>\n  @Input() group: FormGroup\n  @Input() field: FormField\n  @Input() request: any\n\n  @ViewChild('datepicker') datepicker: ElementRef;\n  @ViewChild(DaterangePickerComponent) datepickerComponent: DaterangePickerComponent;\n\n  public daterange: any = {};\n\n  defaultValue: any\n  minute: string = ''\n\n  options: any\n  firstShow = true\n\n  private sub: Subscription\n\n  // differ: any;\n  // constructor(private differs: KeyValueDiffers) {\n  //   this.differ = differs.find({}).create();\n  // }\n\n  selectedDate(value: any, datepicker?: any) {\n    if (value.start) {\n      if (!this.field.more.dateOnly)\n        this.request[this.field.id] = value.start\n      else\n        this.request[this.field.id] = value.start.hours(12)\n      this.datepicker.nativeElement.value = value.start.format(this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\")\n    }\n    this.field.control.setValue(this.datepicker.nativeElement.value)\n  }\n\n  showDaterangepicker(ev: any) {\n\n    if (this.firstShow)\n      this.selectedDate({ start: this.defaultValue })\n\n    this.firstShow = false\n  }\n\n\n  ngOnInit(): void {\n    this.datepicker.nativeElement = this.datepicker.nativeElement\n    if (this.field.more) {\n      if (this.field.more.defaultValue) {\n        switch (this.field.more.defaultValue) {\n          case 'startOfDay':\n            this.defaultValue = moment().startOf('day')\n            break\n          case 'endOfDay':\n            this.defaultValue = moment().endOf('day')\n            break\n          default:\n            this.defaultValue = this.field.more.defaultValue\n            break\n        }\n      } else {\n        this.defaultValue = moment()\n      }\n\n    } else {\n      this.field.more = {}\n    }\n\n    if (this.request[this.field.id]) {\n      let v: any = moment(this.request[this.field.id])\n      this.defaultValue = v\n      this.field.control.setValue(v.format(this.field.more.dateFormat || \"YYYY-MM-DD HH:mm\"))\n    }\n    // if (this.field.more.dateOnly)\n    // this.field.addValidator(Validators.pattern(/^\\d\\d\\d\\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/))\n    // else\n    // this.field.addValidator(Validators.pattern(/^\\d\\d\\d\\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/))\n\n    this.options = {\n      singleDatePicker: true,\n      timePicker: !this.field.more.dateOnly,\n      autoApply: true,\n      timePicker24Hour: true,\n      autoUpdateInput: false,\n      startDate: this.defaultValue\n    };\n\n    if (this.field.more.options)\n      for (let i in this.field.more.options)\n        this.options[i] = this.field.more.options[i]\n\n\n    this.sub = this.field.valueChange.subscribe((v: any) => {\n      this.datepickerComponent.render();\n      this.datepickerComponent.selected.next({ start: moment(v) });\n      this.datepickerComponent.datePicker.setStartDate(moment(v));\n      // this.selectedDate({ start: moment(v) })\n    })\n  }\n\n  // valueChanged(date: Date): void {\n  //   if (this.field.more.dateOnly && date)\n  //     this.request[this.field.id] = date.toString()\n  // }\n\n\n  clear(): void {\n    this.request[this.field.id] = null\n    this.datepicker.nativeElement.value = ''\n    this.field.control.setValue('')\n  }\n\n  ngOnDestroy() {\n    if (this.sub)\n      this.sub.unsubscribe()\n  }\n\n\n}\n",
    "import { FormControl, ValidatorFn, Validators } from '@angular/forms';\nimport { EventEmitter } from '@angular/core';\n\ndeclare var Object: any\n\nexport interface IFormField {\n    id: string\n    type: string\n    label: string\n    col: string\n\n    /*For selects*/\n    options: any\n    optionValue: string\n    optionText: string\n    firstValue: any\n\n    more: any\n\n}\n\nexport class FormField implements IFormField {\n\n    id: string\n    type: string\n    label: string\n    options: any\n    optionValue: string\n    optionText: string\n    col: string\n    firstValue: any\n    more: any\n    nativeElement: any\n\n    control: FormControl\n\n    valueChange: EventEmitter<any>\n\n    constructor(values: IFormField) {\n        Object.assign(this, values);\n        this.control = new FormControl('')\n        this.valueChange = new EventEmitter<any>()\n    }\n\n    required(): FormField {\n        this.control.setValidators(<any>Validators.required)\n        return this\n    }\n\n    setValidators(v: ValidatorFn | ValidatorFn[]): FormField {\n        this.control.setValidators(v)\n        return this\n    }\n\n    setValue(v: any): FormField {\n        this.control.setValue(v)\n        this.valueChange.next(v)\n        return this\n    }\n\n    addValidator(v: ValidatorFn): FormField {\n        let validators: any[] = []\n        if (this.control.validator)\n            validators.push(this.control.validator)\n\n        validators.push(v)\n        this.control.setValidators(validators)\n        return this\n    }\n\n\n}",
    "import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormField } from './form-field.model';\n\n@Component({\n  selector: 'tw-reactive-form',\n  template: `\n<form [formGroup]=\"form\">\n  <div class=\"row\">\n    <div class=\"form-group col-{{field.col || 'sm-6'}}\" [ngClass]=\"field.class\" *ngFor=\"let field of fields\">\n      <label for=\"{{field.id}}\">{{field.label | translate}} <small *ngIf='field.info'>{{field.info | translate}}</small></label>\n      <tw-input-text *ngIf='field.type===\"text\" || field.type===\"number\" || field.type===\"hidden\" || field.type===\"email\" || field.type===\"password\"' [group]='form' [field]='field' [request]='request'></tw-input-text>\n      <tw-input-float *ngIf='field.type===\"float\"' [group]='form' [field]='field' [request]='request'></tw-input-float>\n      <tw-select *ngIf='field.type===\"select\"' [group]='form' [field]='field' [request]='request'></tw-select>\n      <tw-select-t *ngIf='field.type===\"selectT\"' [group]='form' [field]='field' [request]='request'></tw-select-t>\n      <tw-enumselect *ngIf='field.type===\"enumselect\" || field.type===\"enummultiselect\"' [group]='form' [field]='field' [request]='request'></tw-enumselect>\n      <tw-datetime-picker *ngIf='field.type===\"datetime\"' [group]='form' [field]='field' [request]='request'></tw-datetime-picker>\n      <tw-daterange-picker *ngIf='field.type===\"daterange\"' [group]='form' [field]='field' [request]='request'></tw-daterange-picker>\n      <tw-time-picker *ngIf='field.type===\"time\"' [group]='form' [field]='field' [request]='request'></tw-time-picker>\n      <tw-switch *ngIf='field.type===\"boolean\"' [group]='form' [field]='field' [request]='request'></tw-switch>\n      <tw-groupselect *ngIf='field.type===\"groupselect\"' [group]='form' [field]='field' [request]='request'></tw-groupselect>\n      <tw-multiselect *ngIf='field.type===\"multiselect\"' [group]='form' [field]='field' [request]='request'></tw-multiselect>\n      <tw-multiselectcb *ngIf='field.type===\"multiselectcb\"' [group]='form' [field]='field' [request]='request'></tw-multiselectcb>\n      <tw-textarea *ngIf='field.type===\"textarea\"' [group]='form' [field]='field' [request]='request'></tw-textarea>\n      <tw-date-picker *ngIf='field.type===\"date\"' [group]='form' [field]='field' [request]='request'></tw-date-picker>\n      <tw-dof *ngIf='field.type===\"daysOfWeek\"' [group]='form' [field]='field' [request]='request'></tw-dof>\n      <tw-treeview-txt *ngIf='field.type===\"treeview-txt\" || field.type===\"dropdown-treeview-txt\"' [group]='form' [field]='field' [request]='request'></tw-treeview-txt>\n      <tw-treeview-radio *ngIf='field.type===\"treeview-radio\" || field.type===\"dropdown-treeview-radio\"' [group]='form' [field]='field' [request]='request'></tw-treeview-radio>\n      <tw-treeview *ngIf='field.type===\"treeview\" || field.type===\"dropdown-treeview\"' [group]='form' [field]='field' [request]='request'></tw-treeview>\n    </div>\n  </div>\n</form>\n  `\n})\nexport class ReactiveFormComponent implements OnInit, AfterViewInit {\n\n  @Input() fields: any[] = []\n  @Input() form: FormGroup; // our model driven form\n  @Input() request: any; // our model driven form\n  @Output() afterInit: EventEmitter<boolean>\n  @Output() afterViewInit: EventEmitter<boolean>\n\n  public submitted: boolean; // keep track on whether form is submitted\n  public events: any[] = []; // use later to display form changes\n\n  constructor() {\n    this.afterInit = new EventEmitter<boolean>(true)\n    this.afterViewInit = new EventEmitter<boolean>(true)\n  }\n  ngOnInit(): void {\n    this.fields.forEach((field: FormField) => {\n      this.form.addControl(field.id, field.control)\n    })\n    this.afterInit.next(true)\n  }\n\n  ngAfterViewInit(): void {\n    this.afterViewInit.next(true)\n  }\n}"
  ],
  "names": [
    "moment"
  ],
  "mappings": "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"
}
