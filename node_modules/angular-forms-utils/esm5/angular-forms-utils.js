import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, KeyValueDiffers, Injectable, NgModule } from '@angular/core';
import { FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { DaterangePickerComponent, DaterangepickerConfig, Daterangepicker } from 'ng2-daterangepicker';
import * as moment_ from 'moment';
import { TreeviewConfig, TreeviewComponent, TreeviewModule } from 'ngx-treeview';
import { CommonModule } from '@angular/common';
import { TranslateModule } from '@ngx-translate/core';
import { MultiselectDropdownModule } from 'angular-2-dropdown-multiselect';
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ReactiveFormComponent = /** @class */ (function () {
    function ReactiveFormComponent() {
        this.fields = [];
        this.events = [];
        this.afterInit = new EventEmitter(true);
        this.afterViewInit = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    ReactiveFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.fields.forEach(function (field) {
            _this.form.addControl(field.id, field.control);
        });
        this.afterInit.next(true);
    };
    /**
     * @return {?}
     */
    ReactiveFormComponent.prototype.ngAfterViewInit = function () {
        this.afterViewInit.next(true);
    };
    return ReactiveFormComponent;
}());
ReactiveFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-reactive-form',
                template: "\n<form [formGroup]=\"form\">\n  <div class=\"row\">\n    <div class=\"form-group col-{{field.col || 'sm-6'}}\" [ngClass]=\"field.class\" *ngFor=\"let field of fields\">\n      <label for=\"{{field.id}}\">{{field.label | translate}} <small *ngIf='field.info'>{{field.info | translate}}</small></label>\n      <tw-input-text *ngIf='field.type===\"text\" || field.type===\"number\" || field.type===\"hidden\" || field.type===\"email\" || field.type===\"password\"' [group]='form' [field]='field' [request]='request'></tw-input-text>\n      <tw-input-float *ngIf='field.type===\"float\"' [group]='form' [field]='field' [request]='request'></tw-input-float>\n      <tw-select *ngIf='field.type===\"select\"' [group]='form' [field]='field' [request]='request'></tw-select>\n      <tw-select-t *ngIf='field.type===\"selectT\"' [group]='form' [field]='field' [request]='request'></tw-select-t>\n      <tw-enumselect *ngIf='field.type===\"enumselect\" || field.type===\"enummultiselect\"' [group]='form' [field]='field' [request]='request'></tw-enumselect>\n      <tw-datetime-picker *ngIf='field.type===\"datetime\"' [group]='form' [field]='field' [request]='request'></tw-datetime-picker>\n      <tw-daterange-picker *ngIf='field.type===\"daterange\"' [group]='form' [field]='field' [request]='request'></tw-daterange-picker>\n      <tw-time-picker *ngIf='field.type===\"time\"' [group]='form' [field]='field' [request]='request'></tw-time-picker>\n      <tw-switch *ngIf='field.type===\"boolean\"' [group]='form' [field]='field' [request]='request'></tw-switch>\n      <tw-groupselect *ngIf='field.type===\"groupselect\"' [group]='form' [field]='field' [request]='request'></tw-groupselect>\n      <tw-multiselect *ngIf='field.type===\"multiselect\"' [group]='form' [field]='field' [request]='request'></tw-multiselect>\n      <tw-multiselectcb *ngIf='field.type===\"multiselectcb\"' [group]='form' [field]='field' [request]='request'></tw-multiselectcb>\n      <tw-textarea *ngIf='field.type===\"textarea\"' [group]='form' [field]='field' [request]='request'></tw-textarea>\n      <tw-date-picker *ngIf='field.type===\"date\"' [group]='form' [field]='field' [request]='request'></tw-date-picker>\n      <tw-dof *ngIf='field.type===\"daysOfWeek\"' [group]='form' [field]='field' [request]='request'></tw-dof>\n      <tw-treeview-txt *ngIf='field.type===\"treeview-txt\" || field.type===\"dropdown-treeview-txt\"' [group]='form' [field]='field' [request]='request'></tw-treeview-txt>\n      <tw-treeview-radio *ngIf='field.type===\"treeview-radio\" || field.type===\"dropdown-treeview-radio\"' [group]='form' [field]='field' [request]='request'></tw-treeview-radio>\n      <tw-treeview *ngIf='field.type===\"treeview\" || field.type===\"dropdown-treeview\"' [group]='form' [field]='field' [request]='request'></tw-treeview>\n    </div>\n  </div>\n</form>\n  "
            },] },
];
/** @nocollapse */
ReactiveFormComponent.ctorParameters = function () { return []; };
ReactiveFormComponent.propDecorators = {
    "fields": [{ type: Input },],
    "form": [{ type: Input },],
    "request": [{ type: Input },],
    "afterInit": [{ type: Output },],
    "afterViewInit": [{ type: Output },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */
var FormField = /** @class */ (function () {
    /**
     * @param {?} values
     */
    function FormField(values) {
        Object.assign(this, values);
        this.control = new FormControl('');
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FormField.prototype.required = function () {
        this.control.setValidators(/** @type {?} */ (Validators.required));
        return this;
    };
    /**
     * @param {?} v
     * @return {?}
     */
    FormField.prototype.setValidators = function (v) {
        this.control.setValidators(v);
        return this;
    };
    /**
     * @param {?} v
     * @return {?}
     */
    FormField.prototype.setValue = function (v) {
        this.control.setValue(v);
        this.valueChange.next(v);
        return this;
    };
    /**
     * @param {?} v
     * @return {?}
     */
    FormField.prototype.addValidator = function (v) {
        var /** @type {?} */ validators = [];
        if (this.control.validator)
            validators.push(this.control.validator);
        validators.push(v);
        this.control.setValidators(validators);
        return this;
    };
    return FormField;
}());
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var moment = moment_;
var DatetimePickerComponent = /** @class */ (function () {
    function DatetimePickerComponent() {
        this.daterange = {};
        this.minute = '';
        this.firstShow = true;
    }
    /**
     * @param {?} value
     * @param {?=} datepicker
     * @return {?}
     */
    DatetimePickerComponent.prototype.selectedDate = function (value, datepicker) {
        if (value.start) {
            if (!this.field.more.dateOnly)
                this.request[this.field.id] = value.start;
            else
                this.request[this.field.id] = value.start.hours(12);
            this.datepicker.nativeElement.value = value.start.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm");
        }
        this.field.control.setValue(this.datepicker.nativeElement.value);
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    DatetimePickerComponent.prototype.showDaterangepicker = function (ev) {
        if (this.firstShow)
            this.selectedDate({ start: this.defaultValue });
        this.firstShow = false;
    };
    /**
     * @return {?}
     */
    DatetimePickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.datepicker.nativeElement = this.datepicker.nativeElement;
        if (this.field.more) {
            if (this.field.more.defaultValue) {
                switch (this.field.more.defaultValue) {
                    case 'startOfDay':
                        this.defaultValue = moment().startOf('day');
                        break;
                    case 'endOfDay':
                        this.defaultValue = moment().endOf('day');
                        break;
                    default:
                        this.defaultValue = this.field.more.defaultValue;
                        break;
                }
            }
            else {
                this.defaultValue = moment();
            }
        }
        else {
            this.field.more = {};
        }
        if (this.request[this.field.id]) {
            var /** @type {?} */ v = moment(this.request[this.field.id]);
            this.defaultValue = v;
            this.field.control.setValue(v.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm"));
        }
        // if (this.field.more.dateOnly)
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/))
        // else
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/))
        this.options = {
            singleDatePicker: true,
            timePicker: !this.field.more.dateOnly,
            autoApply: true,
            timePicker24Hour: true,
            autoUpdateInput: false,
            startDate: this.defaultValue
        };
        if (this.field.more.options)
            for (var /** @type {?} */ i in this.field.more.options)
                this.options[i] = this.field.more.options[i];
        this.sub = this.field.valueChange.subscribe(function (v) {
            _this.datepickerComponent.render();
            _this.datepickerComponent.selected.next({ start: moment(v) });
            _this.datepickerComponent.datePicker.setStartDate(moment(v));
            // this.selectedDate({ start: moment(v) })
        });
    };
    /**
     * @return {?}
     */
    DatetimePickerComponent.prototype.clear = function () {
        this.request[this.field.id] = null;
        this.datepicker.nativeElement.value = '';
        this.field.control.setValue('');
    };
    /**
     * @return {?}
     */
    DatetimePickerComponent.prototype.ngOnDestroy = function () {
        if (this.sub)
            this.sub.unsubscribe();
    };
    return DatetimePickerComponent;
}());
DatetimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-datetime-picker',
                //   template: `
                //   <div [formGroup]='group' class="input-group">
                //       <input [formControlName]='field.id' name='{{field.id}}' class='form-control' (valueChanged)='valueChanged($event)' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]="field.more.closeOnSelect || false" [(ngModel)]="request[field.id]" [date-only]="field.more.dateOnly ||false" [date-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"' [parse-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"'  readonly/>
                //       <span class="input-group-btn">
                //         <button class='btn btn-default' (click)='clear()'>&times;</button>
                //       </span>
                // </div>
                //   `
                template: "\n  <div [formGroup]='group' class=\"input-group\">\n  <input #datepicker class='form-control' type=\"text\" [formControlName]='field.id' name='{{field.id}}' id='{{field.id}}' daterangepicker [options]=\"options\" (selected)=\"selectedDate($event, daterange)\" (showDaterangepicker)=\"showDaterangepicker($event)\"  readonly/>\n  <span class=\"input-group-btn\">\n  <button class='btn btn-default' (click)='clear()'>&times;</button>\n  </span>\n  </div>"
            },] },
];
/** @nocollapse */
DatetimePickerComponent.ctorParameters = function () { return []; };
DatetimePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "datepicker": [{ type: ViewChild, args: ['datepicker',] },],
    "datepickerComponent": [{ type: ViewChild, args: [DaterangePickerComponent,] },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent() {
        this.defaultValue = '';
        this.closeOnSelect = false;
    }
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnInit = function () {
        if (!this.field.more)
            this.field.more = {};
        this.field.more.dateOnly = true;
        if (!this.field.more.dateFormat)
            this.field.more.dateFormat = 'YYYY-MM-DD';
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnDestroy = function () {
        // if (this.sub)
        //   this.sub.unsubscribe()
    };
    return DatePickerComponent;
}());
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-date-picker',
                template: "<tw-datetime-picker [group]='group' [field]='field'  [request]='request'></tw-datetime-picker>"
            },] },
];
/** @nocollapse */
DatePickerComponent.ctorParameters = function () { return []; };
DatePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var moment$1 = moment_;
var DateRangePickerComponent = /** @class */ (function () {
    /**
     * @param {?} differs
     */
    function DateRangePickerComponent(differs) {
        this.differs = differs;
        this.daterange = {};
        this.minute = '';
        this.firstShow = true;
        this.differ = differs.find({}).create();
    }
    /**
     * @param {?} value
     * @param {?=} datepicker
     * @return {?}
     */
    DateRangePickerComponent.prototype.selectedDate = function (value, datepicker) {
        if (value.start && value.end) {
            if (!this.field.more.dateOnly) {
                this.request[this.field.more.model1] = value.start;
                this.request[this.field.more.model2] = value.end;
            }
            else {
                this.request[this.field.more.model1] = value.start.hours(12);
                this.request[this.field.more.model2] = value.end.hours(12);
            }
            this.datepicker.nativeElement.value = value.start.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm") + ' - ' + value.end.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm");
        }
        this.field.control.setValue(this.datepicker.nativeElement.value);
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    DateRangePickerComponent.prototype.showDaterangepicker = function (ev) {
        if (this.firstShow)
            this.selectedDate({ start: this.defaultValue1, end: this.defaultValue2 });
        this.firstShow = false;
    };
    /**
     * @return {?}
     */
    DateRangePickerComponent.prototype.ngOnInit = function () {
        this.datepicker.nativeElement = this.datepicker.nativeElement;
        if (this.field.more) {
            if (this.field.more.defaultValue1) {
                switch (this.field.more.defaultValue1) {
                    case 'startOfDay':
                        this.defaultValue1 = moment$1().startOf('day');
                        break;
                    case 'endOfDay':
                        this.defaultValue1 = moment$1().endOf('day');
                        break;
                    default:
                        this.defaultValue1 = this.field.more.defaultValue1;
                        break;
                }
            }
            else {
                this.defaultValue1 = moment$1();
            }
            if (this.field.more.defaultValue2) {
                switch (this.field.more.defaultValue2) {
                    case 'startOfDay':
                        this.defaultValue2 = moment$1().startOf('day');
                        break;
                    case 'endOfDay':
                        this.defaultValue2 = moment$1().endOf('day');
                        break;
                    default:
                        this.defaultValue2 = this.field.more.defaultValue2;
                        break;
                }
            }
            else {
                this.defaultValue2 = moment$1();
            }
        }
        else {
            this.field.more = {};
        }
        if (this.request[this.field.more.model1]) {
            var /** @type {?} */ v = moment$1(this.request[this.field.more.model1]);
            this.defaultValue1 = v;
        }
        if (this.request[this.field.more.model2]) {
            var /** @type {?} */ v = moment$1(this.request[this.field.more.model2]);
            this.defaultValue2 = v;
        }
        if (this.request[this.field.more.model1] && this.request[this.field.more.model2])
            this.field.control.setValue(this.defaultValue1.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm") + ' - ' + this.defaultValue2.format(this.field.more.dateFormat || "YYYY-MM-DD HH:mm"));
        // if (this.field.more.dateOnly)
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$/))
        // else
        // this.field.addValidator(Validators.pattern(/^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/))
        this.options = {
            timePicker: !this.field.more.dateOnly,
            timePicker24Hour: true,
            autoUpdateInput: false,
            autoApply: true,
            startDate: this.defaultValue1,
            endDate: this.defaultValue2
        };
        if (this.field.more.options)
            for (var /** @type {?} */ i in this.field.more.options)
                this.options[i] = this.field.more.options[i];
    };
    /**
     * @return {?}
     */
    DateRangePickerComponent.prototype.clear = function () {
        this.request[this.field.more.model1] = null;
        this.request[this.field.more.model2] = null;
        this.datepicker.nativeElement.value = '';
        this.field.control.setValue('');
    };
    /**
     * @return {?}
     */
    DateRangePickerComponent.prototype.ngDoCheck = function () {
        var _this = this;
        var /** @type {?} */ changes = this.differ.diff(this.request);
        if (changes) {
            var /** @type {?} */ start_1 = null;
            var /** @type {?} */ end_1 = null;
            changes.forEachChangedItem(function (r) {
                if (r.key === _this.field.more.model1) {
                    start_1 = r.currentValue;
                }
                else if (r.key === _this.field.more.model2) {
                    end_1 = r.currentValue;
                }
            });
            if (start_1 || end_1) {
                this.selectedDate({ start: start_1 || moment$1(this.request[this.field.more.model1]), end: end_1 || moment$1(this.request[this.field.more.model2]) });
                this.firstShow = false;
            }
        }
    };
    return DateRangePickerComponent;
}());
DateRangePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-daterange-picker',
                //   template: `
                //   <div [formGroup]='group' class="input-group">
                //       <input [formControlName]='field.id' name='{{field.id}}' class='form-control' (valueChanged)='valueChanged($event)' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]="field.more.closeOnSelect || false" [(ngModel)]="request[field.id]" [date-only]="field.more.dateOnly ||false" [date-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"' [parse-format]='this.field.more.dateFormat || "YYYY-MM-DD HH:mm"'  readonly/>
                //       <span class="input-group-btn">
                //         <button class='btn btn-default' (click)='clear()'>&times;</button>
                //       </span>
                // </div>
                //   `
                template: "\n  <div [formGroup]='group' class=\"input-group\">\n  <input #datepicker class='form-control' type=\"text\" [formControlName]='field.id' name='{{field.id}}' daterangepicker [options]=\"options\" (selected)=\"selectedDate($event, daterange)\"  (showDaterangepicker)=\"showDaterangepicker($event)\" readonly/>\n  <span class=\"input-group-btn\">\n  <button class='btn btn-default' (click)='clear()'>&times;</button>\n  </span>\n  </div>"
            },] },
];
/** @nocollapse */
DateRangePickerComponent.ctorParameters = function () { return [
    { type: KeyValueDiffers, },
]; };
DateRangePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "datepicker": [{ type: ViewChild, args: ['datepicker',] },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SelectComponent = /** @class */ (function () {
    function SelectComponent() {
    }
    return SelectComponent;
}());
SelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-select',
                template: "\n  <div [formGroup]='group'>\n  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n      <option [ngValue]=\"field.firstValue.value \" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n      <option [ngValue]=\"option[field.optionValue] \" *ngFor=\"let option of field.options \">\n        {{option[field.optionText]}}\n      </option>\n    </select>\n</div>\n  "
            },] },
];
/** @nocollapse */
SelectComponent.ctorParameters = function () { return []; };
SelectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SelectTComponent = /** @class */ (function () {
    function SelectTComponent() {
    }
    return SelectTComponent;
}());
SelectTComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-select-t',
                template: "\n  <div [formGroup]='group'>\n  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n      <option [ngValue]=\"field.firstValue.value\" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n      <option [ngValue]=\"option[field.optionValue]\" *ngFor=\"let option of field.options \">\n        {{option[field.optionText] | translate}}\n      </option>\n    </select>\n</div>\n  "
            },] },
];
/** @nocollapse */
SelectTComponent.ctorParameters = function () { return []; };
SelectTComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var EnumselectComponent = /** @class */ (function () {
    function EnumselectComponent() {
    }
    /**
     * @param {?} enumObj
     * @return {?}
     */
    EnumselectComponent.prototype.enumToArray = function (enumObj) {
        return Object.keys(enumObj).slice(Object.keys(enumObj).length / 2);
    };
    return EnumselectComponent;
}());
EnumselectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-enumselect',
                template: "\n  <div [formGroup]='group'>\n  <select [attr.multiple]='field.type === \"enumselect\"?null:true' [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n      <option [ngValue]=\"field.firstValue.value\" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n      <option [ngValue]=\"option\" *ngFor=\"let option of enumToArray(field.options)\">\n        {{option | translate}}\n      </option>\n    </select>\n</div>\n  "
            },] },
];
/** @nocollapse */
EnumselectComponent.ctorParameters = function () { return []; };
EnumselectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var InputTextComponent = /** @class */ (function () {
    function InputTextComponent() {
    }
    /**
     * @return {?}
     */
    InputTextComponent.prototype.clear = function () {
        this.request[this.field.id] = null;
    };
    return InputTextComponent;
}());
InputTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-input-text',
                template: "\n   <div [formGroup]='group' [ngClass]='field.more?.nullable ? \"input-group\" :\"\"'>\n  <input [formControlName]='field.id' name='{{field.id}}' type='{{field.type}}' class='form-control' [(ngModel)]=\"request[field.id]\"\n    [readonly]='field.more?.readonly' />\n          <span class=\"input-group-btn\" *ngIf='field.more?.nullable && field.type!==\"hidden\"'>\n        <button class='btn btn-default' (click)='clear()'>&times;</button>\n      </span>\n</div>\n   "
            },] },
];
/** @nocollapse */
InputTextComponent.ctorParameters = function () { return []; };
InputTextComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var InputFloatComponent = /** @class */ (function () {
    function InputFloatComponent() {
    }
    /**
     * @return {?}
     */
    InputFloatComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.field.addValidator(Validators.pattern(/^[+-]?([0-9]*[.])?[0-9]+$/));
        this.sub = this.field.control.valueChanges.subscribe(function (value) {
            _this.request[_this.field.id] = parseFloat(value);
        });
    };
    /**
     * @return {?}
     */
    InputFloatComponent.prototype.ngOnDestroy = function () {
        if (this.sub)
            this.sub.unsubscribe();
    };
    return InputFloatComponent;
}());
InputFloatComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-input-float',
                template: "\n  <div [formGroup]='group'>\n    <input [formControlName]='field.id' name='{{field.id}}' type='text' class='form-control' [readonly]='field.more?.readonly'  />\n  </div>"
            },] },
];
/** @nocollapse */
InputFloatComponent.ctorParameters = function () { return []; };
InputFloatComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// <div [formGroup]='group' class="input-group">
//   <input [formControlName]='field.id' name='{{field.id}}' class='form-control' ngui-datetime-picker default-value='{{defaultValue}}' [close-on-select]="field.more.closeOnSelect || false"  (valueChanged)='valueChanged($event)'  [(ngModel)]="request[field.id]"  [time-only]="true" date-format='HH:mm' parse-format='HH:mm'  readonly/>
//       <span class="input-group-btn">
//       <button class='btn btn-default' (click)='clear()'>&times;</button>
//     </span>
// </div>
var TimePickerComponent = /** @class */ (function () {
    function TimePickerComponent() {
        this.defaultValue = '';
        this.hours = [];
        for (var /** @type {?} */ i = 0; i <= 23; i++) {
            if (i < 10)
                this.hours.push('0' + i.toString());
            else
                this.hours.push(i.toString());
        }
        this.minutes = [];
        for (var /** @type {?} */ i = 0; i <= 59; i++) {
            if (i < 10)
                this.minutes.push('0' + i.toString());
            else
                this.minutes.push(i.toString());
        }
    }
    /**
     * @param {?=} hour
     * @return {?}
     */
    TimePickerComponent.prototype.onChange = function (hour) {
        if (hour && !this.minute)
            this.minute = '00';
        if (this.hour && this.minute)
            this.request[this.field.id] = this.hour + ':' + this.minute;
        else
            this.request[this.field.id] = null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnChanges = function (value) {
        var /** @type {?} */ newV = value['request'].currentValue[this.field.id];
        if (newV) {
            var /** @type {?} */ split = newV.split(':');
            this.hour = split[0] ? split[0] : '';
            this.minute = split[1] ? split[1] : '';
        }
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.ngOnInit = function () {
        if (this.field.more) {
            if (this.field.more.defaultValue) {
                // switch (this.field.more.defaultValue) {
                //   case 'startOfDay':
                //     this.defaultValue = '00:00'
                //     break
                //   case 'endOfDay':
                //     this.defaultValue = '23:59'
                //     break
                //   default:
                //     this.defaultValue = this.field.more.defaultValue
                //     break
                // }
            }
        }
        else {
            this.field.more = {};
        }
        // this.field.addValidator(Validators.pattern(/^(00|0[0-9]|1[0-9]|2[0-3]):(0[0-9]|[0-5][0-9])(:([0-9]|[0-5][0-9]))?$/))
    };
    /**
     * @return {?}
     */
    TimePickerComponent.prototype.clear = function () {
        this.hour = '';
        this.minute = '';
        this.request[this.field.id] = null;
    };
    return TimePickerComponent;
}());
TimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-time-picker',
                template: "\n  <div [formGroup]='group' style='display:none'>\n  <input type='hidden'  [formControlName]='field.id' [(ngModel)]=\"this.request[this.field.id]\" />\n  </div>\n  <div class='clear' >\n   <select [(ngModel)]=\"hour\" (ngModelChange)='onChange(true)' class='form-control pull-left' style='width:100px;'>\n        <option [ngValue]=\"\"></option>\n        <option *ngFor=\"let h of hours\" [ngValue]=\"h\">{{h}}</option>\n    </select>\n    <span class='pull-left' style='margin:5px'>hh</span>\n     <select [(ngModel)]=\"minute\" (ngModelChange)='onChange()'  class='form-control pull-left' style='width:100px;'>\n        <option [ngValue]=\"\"></option>\n        <option *ngFor=\"let m of minutes\" [ngValue]=\"m\">{{m}}</option>\n    </select>\n    <span class='pull-left' style='margin:5px'>mm</span>\n      <button class='btn btn-default pull-left'  (click)='clear()'>&times;</button>\n  </div>\n    "
            },] },
];
/** @nocollapse */
TimePickerComponent.ctorParameters = function () { return []; };
TimePickerComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent() {
    }
    return SwitchComponent;
}());
SwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-switch',
                template: "\n  <div [formGroup]='group'>\n  <label class=\"switch switch-icon switch-pill switch-primary-outline-alt\">\n        <input type=\"checkbox\" [formControlName]='field.id' class=\"switch-input\"  [(ngModel)]=\"request[field.id]\" >\n        <span class=\"switch-label\" data-on=\"yes\" data-off=\"no\"></span>\n        <span class=\"switch-handle\"></span>\n    </label>\n</div>\n  "
            },] },
];
/** @nocollapse */
SwitchComponent.ctorParameters = function () { return []; };
SwitchComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GroupSelectComponent = /** @class */ (function () {
    function GroupSelectComponent() {
    }
    return GroupSelectComponent;
}());
GroupSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-groupselect',
                template: "\n  <div [formGroup]='group'>\n  <select [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\" >\n        <option [ngValue]=\"field.firstValue.value \" *ngIf='field.firstValue' >{{field.firstValue.text | translate}}</option>\n        <optgroup label=\"{{group.label}}\" *ngFor=\"let group of field.options\">\n        <option [ngValue]=\"option[field.optionValue]\" *ngFor=\"let option of group.values\">\n          {{option[field.optionText]}}\n        </option>\n      </optgroup>\n    </select>\n</div>\n  "
            },] },
];
/** @nocollapse */
GroupSelectComponent.ctorParameters = function () { return []; };
GroupSelectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MultiSelectComponent = /** @class */ (function () {
    function MultiSelectComponent() {
    }
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.ngOnInit = function () {
        if (!this.field.more)
            this.field.more = {};
    };
    Object.defineProperty(MultiSelectComponent.prototype, "allSelected", {
        /**
         * @return {?}
         */
        get: function () {
            return this.testSelected();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.selectAll = function () {
        var _this = this;
        if (this.testSelected())
            this.request[this.field.id] = [];
        else {
            this.request[this.field.id] = [];
            this.field.options.forEach(function (option) {
                _this.request[_this.field.id].push(option[_this.field.optionValue]);
            });
        }
    };
    /**
     * @return {?}
     */
    MultiSelectComponent.prototype.testSelected = function () {
        if (!this.request[this.field.id] || !this.field.options)
            return false;
        if (this.request[this.field.id].length === this.field.options.length)
            return true;
        if (this.request[this.field.id].length === this.field.options.size)
            return true;
        return false;
    };
    return MultiSelectComponent;
}());
MultiSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-multiselect',
                template: "\n  <div [formGroup]='group'>\n   <button style='margin-top: -30px; margin-bottom: 5px;' [ngClass]=\"allSelected ? 'btn-primary' : 'btn-default'\" class='btn-sm btn pull-right' (click)='selectAll()' > {{field.more.allText || 'All'}}</button>\n<select multiple [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\">\n    <option [ngValue]=\"option[field.optionValue]\" *ngFor=\"let option of field.options\">\n      {{option[field.optionText]}}\n    </option>\n  </select>\n  </div>\n  "
            },] },
];
/** @nocollapse */
MultiSelectComponent.ctorParameters = function () { return []; };
MultiSelectComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MultiSelectCBComponent = /** @class */ (function () {
    function MultiSelectCBComponent() {
    }
    /**
     * @return {?}
     */
    MultiSelectCBComponent.prototype.ngOnInit = function () {
        if (!this.field.more)
            this.field.more = {};
    };
    Object.defineProperty(MultiSelectCBComponent.prototype, "allSelected", {
        /**
         * @return {?}
         */
        get: function () {
            return this.testSelected();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiSelectCBComponent.prototype, "options", {
        /**
         * @return {?}
         */
        get: function () {
            var _this = this;
            if (this.field.options)
                return this.field.options.map(function (opt) {
                    opt.id = opt[_this.field.optionValue];
                    opt.name = opt[_this.field.optionText];
                    return opt;
                });
            return [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MultiSelectCBComponent.prototype.selectAll = function () {
        var _this = this;
        if (this.testSelected())
            this.request[this.field.id] = [];
        else {
            this.request[this.field.id] = [];
            this.field.options.forEach(function (option) {
                _this.request[_this.field.id].push(option[_this.field.optionValue]);
            });
        }
    };
    /**
     * @return {?}
     */
    MultiSelectCBComponent.prototype.testSelected = function () {
        if (!this.request[this.field.id] || !this.field.options)
            return false;
        if (this.request[this.field.id].length === this.field.options.length)
            return true;
        if (this.request[this.field.id].length === this.field.options.size)
            return true;
        return false;
    };
    return MultiSelectCBComponent;
}());
MultiSelectCBComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-multiselectcb',
                template: "\n  <div [formGroup]='group'>\n    <button style='margin-top: -30px; margin-bottom: 5px;' [ngClass]=\"allSelected ? 'btn-primary' : 'btn-default'\" class='btn-sm btn pull-right' (click)='selectAll()' > {{field.more.allText || 'All'}}</button>\n    <ss-multiselect-dropdown [formControlName]='field.id' [options]=\"options\" [(ngModel)]=\"request[field.id]\" ></ss-multiselect-dropdown>\n  </div>\n  "
            },] },
];
/** @nocollapse */
MultiSelectCBComponent.ctorParameters = function () { return []; };
MultiSelectCBComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DaysOfWeekComponent = /** @class */ (function () {
    function DaysOfWeekComponent() {
    }
    /**
     * @return {?}
     */
    DaysOfWeekComponent.prototype.ngOnInit = function () {
        this.field.options = DaysOfWeekValues;
    };
    return DaysOfWeekComponent;
}());
DaysOfWeekComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-dof',
                template: "<tw-enumselect [group]='group' [field]='field' [request]='request'></tw-enumselect>"
            },] },
];
/** @nocollapse */
DaysOfWeekComponent.ctorParameters = function () { return []; };
DaysOfWeekComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/** @enum {number} */
var DaysOfWeekValues = {
    Sunday: 0,
    Monday: 1,
    Tuesday: 2,
    Wednesday: 3,
    Thursday: 4,
    Friday: 5,
    Saturday: 6,
};
DaysOfWeekValues[DaysOfWeekValues.Sunday] = "Sunday";
DaysOfWeekValues[DaysOfWeekValues.Monday] = "Monday";
DaysOfWeekValues[DaysOfWeekValues.Tuesday] = "Tuesday";
DaysOfWeekValues[DaysOfWeekValues.Wednesday] = "Wednesday";
DaysOfWeekValues[DaysOfWeekValues.Thursday] = "Thursday";
DaysOfWeekValues[DaysOfWeekValues.Friday] = "Friday";
DaysOfWeekValues[DaysOfWeekValues.Saturday] = "Saturday";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TextAreaComponent = /** @class */ (function () {
    function TextAreaComponent() {
    }
    return TextAreaComponent;
}());
TextAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-textarea',
                template: "\n  <div [formGroup]='group'>\n   <textarea [formControlName]='field.id' name='{{field.id}}' class='form-control' [(ngModel)]=\"request[field.id]\"></textarea>\n</div>\n  "
            },] },
];
/** @nocollapse */
TextAreaComponent.ctorParameters = function () { return []; };
TextAreaComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TreeViewComponent = /** @class */ (function () {
    function TreeViewComponent() {
        this.selectConfig = TreeviewConfig.create({
            hasAllCheckBox: true,
            hasFilter: true,
            hasCollapseExpand: true,
            decoupleChildFromParent: false,
            maxHeight: 500
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    TreeViewComponent.prototype.checkItem = function (item) {
        var /** @type {?} */ selection = item.getSelection();
        var /** @type {?} */ values = [];
        if (item.children) {
            if (selection.uncheckedItems.length === 0)
                values.push(item.value);
            try {
                for (var _a = tslib_1.__values(item.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var child = _b.value;
                    values = values.concat(this.checkItem(child));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return values;
        var e_1, _c;
    };
    /**
     * @param {?=} values
     * @return {?}
     */
    TreeViewComponent.prototype.updateModel = function (values) {
        /*Select Parent*/
        if (this.treeviewComponent) {
            try {
                for (var _a = tslib_1.__values(this.treeviewComponent.items), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var item = _b.value;
                    values = values.concat(this.checkItem(item));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (values)
            this.field.setValue(values);
        else
            this.field.setValue([]);
        var e_2, _c;
    };
    /**
     * @return {?}
     */
    TreeViewComponent.prototype.ngOnInit = function () {
        if (this.field.more && this.field.more.selectConfig)
            this.selectConfig = this.field.more.selectConfig;
    };
    return TreeViewComponent;
}());
TreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview',
                template: "\n  <div [formGroup]='group'>\n   <ngx-treeview *ngIf='field.type===\"treeview\"' [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-treeview>\n   <ngx-dropdown-treeview *ngIf='field.type===\"dropdown-treeview\"'  [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-dropdown-treeview>\n  <input [formControlName]='field.id' name='{{field.id}}' type='hidden' class='form-control' [(ngModel)]=\"request[field.id]\"/>\n</div>\n  "
            },] },
];
/** @nocollapse */
TreeViewComponent.ctorParameters = function () { return []; };
TreeViewComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "treeviewComponent": [{ type: ViewChild, args: [TreeviewComponent,] },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TreeViewTxtComponent = /** @class */ (function () {
    function TreeViewTxtComponent() {
        this.selectConfig = TreeviewConfig.create({
            hasAllCheckBox: true,
            hasFilter: true,
            hasCollapseExpand: true,
            decoupleChildFromParent: false,
            maxHeight: 500
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    TreeViewTxtComponent.prototype.checkItem = function (item) {
        var /** @type {?} */ selection = item.getSelection();
        var /** @type {?} */ values = [];
        if (item.children) {
            if (selection.uncheckedItems.length === 0)
                values.push(item.value);
            try {
                for (var _a = tslib_1.__values(item.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var child = _b.value;
                    values = values.concat(this.checkItem(child));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return values;
        var e_3, _c;
    };
    /**
     * @param {?=} values
     * @return {?}
     */
    TreeViewTxtComponent.prototype.updateModel = function (values) {
        /*Select Parent*/
        if (this.treeviewComponent) {
            try {
                for (var _a = tslib_1.__values(this.treeviewComponent.items), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var item = _b.value;
                    values = values.concat(this.checkItem(item));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (values)
            this.field.setValue(values.join(','));
        else
            this.field.setValue('');
        var e_4, _c;
    };
    /**
     * @return {?}
     */
    TreeViewTxtComponent.prototype.ngOnInit = function () {
        if (this.field.more && this.field.more.selectConfig)
            this.selectConfig = this.field.more.selectConfig;
    };
    return TreeViewTxtComponent;
}());
TreeViewTxtComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview-txt',
                template: "\n  <div [formGroup]='group'>\n   <ngx-treeview #treeview *ngIf='field.type===\"treeview-txt\"' id=\"treeview_{{field.id}}\" [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-treeview>\n   <ngx-dropdown-treeview *ngIf='field.type===\"dropdown-treeview-txt\"' id=\"treeview_{{field.id}}\" [config]=\"selectConfig\" [items]=\"field.options\" (selectedChange)=\"updateModel($event)\"></ngx-dropdown-treeview>\n    <input [formControlName]='field.id' name='{{field.id}}' type='hidden' class='form-control' [(ngModel)]=\"request[field.id]\"/>\n</div>\n  "
            },] },
];
/** @nocollapse */
TreeViewTxtComponent.ctorParameters = function () { return []; };
TreeViewTxtComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
    "treeviewComponent": [{ type: ViewChild, args: [TreeviewComponent,] },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TreeViewRadioComponent = /** @class */ (function () {
    function TreeViewRadioComponent() {
        this.selectConfig = TreeviewConfig.create({
            hasAllCheckBox: true,
            hasFilter: true,
            hasCollapseExpand: true,
            decoupleChildFromParent: false,
            maxHeight: 500
        });
    }
    /**
     * @return {?}
     */
    TreeViewRadioComponent.prototype.toggleCollapseExpand = function () {
        var _this = this;
        this.allItem.collapsed = !this.allItem.collapsed;
        if (this.field.options.items) {
            this.field.options.items.forEach(function (item) { return item.setCollapsedRecursive(_this.allItem.collapsed); });
        }
    };
    /**
     * @param {?=} values
     * @return {?}
     */
    TreeViewRadioComponent.prototype.updateModel = function (values) {
        if (values)
            this.field.setValue(values.join(','));
        else
            this.field.setValue('');
    };
    /**
     * @return {?}
     */
    TreeViewRadioComponent.prototype.ngOnInit = function () {
        if (this.field.more && this.field.more.selectConfig)
            this.selectConfig = this.field.more.selectConfig;
    };
    return TreeViewRadioComponent;
}());
TreeViewRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview-radio',
                template: "\n<ng-template #tpl let-item=\"item\"\n    let-toggleCollapseExpand=\"toggleCollapseExpand\"\n    let-onCheckedChange=\"onCheckedChange\">\n    <div class=\"form-check\" [formGroup]='group'>\n        <i *ngIf=\"item.children\" (click)=\"toggleCollapseExpand()\" aria-hidden=\"true\"\n            class=\"fa\" [class.fa-caret-right]=\"item.collapsed\" [class.fa-caret-down]=\"!item.collapsed\"></i>\n        <label class=\"form-check-label\">\n            <input type=\"radio\"  class=\"form-check-input\" [(ngModel)]=\"request[field.id]\" [formControlName]='field.id'  name='{{field.id}}' [value]='item.value' />\n            {{item.text}}\n        </label>\n    </div>\n</ng-template>\n<div class=\"treeview-header\">\n</div>\n<div class=\"treeview-container\" [style.max-height.px]=\"selectConfig.maxHeight\" >\n    <div *ngFor=\"let item of field.options\">\n        <tw-treeview-item [item]=\"item\" [template]=\"template || tpl\" >\n        </tw-treeview-item>\n    </div>\n</div>\n",
                styles: ["\n.row-margin {\n    margin-top: .3rem;\n}\n.label-item-all {\n}\n.label-collapse-expand {\n    margin: 0;\n    padding: 0 .3rem;\n    cursor: pointer;\n}\n.divider {\n    height: 1px;\n    margin: 0.5rem 0;\n    overflow: hidden;\n    background: #000;\n}\n.treeview-container {\n    overflow-x: hidden;\n    overflow-y: auto;\n    padding-right: 18px;\n}\n.treeview-text {\n    padding: .3rem 0;\n    white-space: nowrap;\n}\n"]
            },] },
];
/** @nocollapse */
TreeViewRadioComponent.ctorParameters = function () { return []; };
TreeViewRadioComponent.propDecorators = {
    "group": [{ type: Input },],
    "field": [{ type: Input },],
    "request": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TreeViewItemComponent = /** @class */ (function () {
    function TreeViewItemComponent() {
        var _this = this;
        this.toggleCollapseExpand = function () {
            _this.item.collapsed = !_this.item.collapsed;
        };
    }
    return TreeViewItemComponent;
}());
TreeViewItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-treeview-item',
                template: "\n<div class=\"treeview-item\">\n    <ng-template [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{item: item, toggleCollapseExpand: toggleCollapseExpand}\">\n    </ng-template>\n    <div *ngIf=\"!item.collapsed\">\n        <tw-treeview-item *ngFor=\"let child of item.children\" [item]=\"child\" [template]=\"template\">\n        </tw-treeview-item>\n    </div>\n</div>\n    ",
                styles: ["\n:host {\n    display: block;\n}\n:host /deep/ .fa {\n    margin-right: .2rem;\n    width: .5rem;\n    cursor: pointer;\n}\n.treeview-item {\n    white-space: nowrap;\n}\n.treeview-item .treeview-item {\n    margin-left: 2rem;\n}\n    "]
            },] },
];
/** @nocollapse */
TreeViewItemComponent.ctorParameters = function () { return []; };
TreeViewItemComponent.propDecorators = {
    "template": [{ type: Input },],
    "item": [{ type: Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BusyService = /** @class */ (function () {
    function BusyService() {
        this.global = false;
    }
    /**
     * @return {?}
     */
    BusyService.prototype.start = function () {
        this.global = true;
    };
    /**
     * @return {?}
     */
    BusyService.prototype.stop = function () {
        this.global = false;
    };
    return BusyService;
}());
BusyService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BusyService.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BusyButtonComponent = /** @class */ (function () {
    /**
     * @param {?} busy
     */
    function BusyButtonComponent(busy) {
        this.busy = busy;
        this.onClick = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    BusyButtonComponent.prototype.send = function () {
        this.onClick.next(true);
    };
    return BusyButtonComponent;
}());
BusyButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'tw-busy-button',
                template: '<button (click)=\'send()\' [class]="cssClass" [disabled]="disabled || busy.global"><span style=\'margin- right:5px\'  *ngIf=\'busy.global\'><img src="assets/img/ajax-loader.gif"/></span><i class=\'fa fa-{{icon }}\' style=\'margin- right:5px\'  *ngIf=\'icon && !busy.global\'></i><ng-content></ng-content></button>'
            },] },
];
/** @nocollapse */
BusyButtonComponent.ctorParameters = function () { return [
    { type: BusyService, },
]; };
BusyButtonComponent.propDecorators = {
    "cssClass": [{ type: Input },],
    "disabled": [{ type: Input },],
    "icon": [{ type: Input },],
    "onClick": [{ type: Output },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AngularFormsUtilsConfigs = /** @class */ (function () {
    /**
     * @param {?} daterangepickerConfig
     */
    function AngularFormsUtilsConfigs(daterangepickerConfig) {
        this.daterangepickerConfig = daterangepickerConfig;
    }
    return AngularFormsUtilsConfigs;
}());
AngularFormsUtilsConfigs.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AngularFormsUtilsConfigs.ctorParameters = function () { return [
    { type: DaterangepickerConfig, },
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// NguiDatetime.parseDate = (str: any): any => {
//   let m: any = moment(str)
//   if (!m.isValid()) { //Time
//     // let tmp = str.split(':');
//     m = moment()
//     // m.set('hour', parseInt(tmp[0] || '0', 10))
//     // m.set('minute', parseInt(tmp[1] || '0', 10))
//     // m.set('second', parseInt(tmp[2] || '0', 10))
//   }
//   return m.toDate()
// }
var decExp = [
    ReactiveFormComponent,
    DatetimePickerComponent,
    MultiSelectCBComponent,
    SelectComponent,
    EnumselectComponent,
    InputTextComponent,
    InputFloatComponent,
    TimePickerComponent,
    SwitchComponent,
    GroupSelectComponent,
    DatePickerComponent,
    DaysOfWeekComponent,
    MultiSelectComponent,
    TextAreaComponent,
    BusyButtonComponent,
    TreeViewComponent,
    TreeViewTxtComponent,
    TreeViewRadioComponent,
    TreeViewItemComponent,
    SelectTComponent,
    DateRangePickerComponent
];
var AngularFormsUtilsModule = /** @class */ (function () {
    function AngularFormsUtilsModule() {
    }
    /**
     * @return {?}
     */
    AngularFormsUtilsModule.forRoot = function () {
        return { ngModule: AngularFormsUtilsModule, providers: [BusyService] };
    };
    return AngularFormsUtilsModule;
}());
AngularFormsUtilsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    ReactiveFormsModule,
                    CommonModule,
                    TranslateModule,
                    MultiselectDropdownModule,
                    FormsModule,
                    TreeviewModule,
                    Daterangepicker
                ],
                declarations: decExp,
                exports: decExp,
                providers: [AngularFormsUtilsConfigs]
            },] },
];
/** @nocollapse */
AngularFormsUtilsModule.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { BusyService, AngularFormsUtilsConfigs, AngularFormsUtilsModule, FormField, BusyButtonComponent as ɵo, DatePickerComponent as ɵk, DateRangePickerComponent as ɵu, DatetimePickerComponent as ɵb, DaysOfWeekComponent as ɵl, EnumselectComponent as ɵe, GroupSelectComponent as ɵj, InputFloatComponent as ɵg, InputTextComponent as ɵf, MultiSelectComponent as ɵm, MultiSelectCBComponent as ɵc, ReactiveFormComponent as ɵa, SelectTComponent as ɵt, SelectComponent as ɵd, SwitchComponent as ɵi, TextAreaComponent as ɵn, TimePickerComponent as ɵh, TreeViewItemComponent as ɵs, TreeViewRadioComponent as ɵr, TreeViewTxtComponent as ɵq, TreeViewComponent as ɵp };
//# sourceMappingURL=angular-forms-utils.js.map
